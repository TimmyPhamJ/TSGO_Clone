	<link href="/assets/vendors/bootstrap-select/dist/css/bootstrap-select.min.css" rel="stylesheet" />
 	<!-- Socket -->
    <!-- <script src="/sockets/node_modules/socket.io-client/dist/socket.io.js"></script>

    <script type="text/javascript">
        var socket = io.connect('https://demororo.cehsoft.com/');
   	</script> -->

<style>
	#contenttable_wrapper .dataTables_scroll #cell-context-1 .dropdown-menu .dropdown-item .sub-text,
	#contenttable_wrapper .dataTables_scroll #cell-context-2 .dropdown-menu .dropdown-item .sub-text,
	#contenttable_wrapper .dataTables_scroll #cell-context-3 .dropdown-menu .dropdown-item .sub-text,
	#contenttable_wrapper .dataTables_scroll #cell-context-4 .dropdown-menu .dropdown-item .sub-text,
	#contenttable_wrapper .dataTables_scroll #cell-context-5 .dropdown-menu .dropdown-item .sub-text,
	#contenttable2_wrapper .dataTables_scroll #cell-context-12 .dropdown-menu .dropdown-item .sub-text,
	#contenttable2_wrapper .dataTables_scroll #cell-context-22 .dropdown-menu .dropdown-item .sub-text,
	#contenttable2_wrapper .dataTables_scroll #cell-context-32 .dropdown-menu .dropdown-item .sub-text,
	#contenttable2_wrapper .dataTables_scroll #cell-context-42 .dropdown-menu .dropdown-item .sub-text,
	#contenttable2_wrapper .dataTables_scroll #cell-context-52 .dropdown-menu .dropdown-item .sub-text{
		margin-left: 7px;
		font-size: 12px;
		font-style: italic;
	}
	#select_box,#select_method_box,#set_value_box{
            width: 100vw;
            height: 100vh;
            position: fixed;
            left: 0px;
            top:0px;
            background-color: rgba(1, 1, 1, 0.3);
            z-index: 9999999;
        }
        .m-tech-table{
            display: block;
            width: 100%;
            height: 100%;
        }
        .m-list-title{
            color: #ffffff;
            background: #0a455f;
        }
        .m-tech-table tbody {
        display: block;
        max-height: calc(100% - 31px);
        min-height: calc(100% - 31px);
        overflow-y: scroll;
        background-color: #86c8e5;
        }

        .m-tech-table thead,.m-tech-table tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
        }
        .m-tech-list{
            background-color: #86c8e5;
            color: #ffffff;
            border-bottom: 1px solid #e3e3e3;
            cursor: pointer;
        }
        
        .m-tech-list.active{
            background-color: #286c96;
        }
        .m-tech-list:hover{
            background-color: #427696;
        }
        .m-tech-list td{
            text-align: center;
        }
        .setinp{
            width: 100%;
            border: 1px solid #427696;
            padding: 5px 10px;
            font-weight: bold;
            background-color: #ffffff59 !important;
        }
        .setvaluebtn{
            width: 200px;
            font-weight: bold;
            position: absolute;
            bottom: -15px;
            height: 30px;
            padding: 4px;
            left: calc((100% - 200px) / 2);
            cursor: pointer;
        }
        
        .setvaluebtn span{
            z-index: 1;
            position: relative;
        }
        .setvaluebtn:before{
            content: '';
            display: block;
            width: 200px;
            background: #82c1c1;
            font-weight: bold;
            position: absolute;
            bottom: 0px;
            height: 30px;
            padding: 4px;
            left: calc((100% - 200px) / 2);
            box-shadow: 1px 1px 4px #111;
            cursor: pointer;
            transform: skewX(30deg);
        }
        input[readonly]{
            color: #777879;
        }
		input:read-only{
            color: #777879;
        }
</style>

<div class="row">
	<div class="col-xl-12" style="font-size: 12px;">
		<div class="ibox collapsible-box">
			<i class="la la-angle-double-up dock-right"></i>
			<div class="ibox-head">
				<div class="ibox-title">Phân bổ và giám sát nhập xuất tàu</div>
				<div class="button-bar-group mr-3">			
					<button id="search" class="btn btn-outline-warning btn-sm btn-loading mr-1" 
											data-loading-text="<i class='la la-spinner spinner'></i>Nạp dữ liệu"
										 	title="Nạp dữ liệu">
						<span class="btn-icon"><i class="ti-search"></i>Nạp dữ liệu</span>
					</button>
				</div>
			</div>
			<div class="ibox-body pt-0 pb-0 bg-f9 border-e">
				<div class="row ibox mb-0 border-e pb-1 pt-3">
					<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
						<div class="row">
							<div class="ml-3">
								<label class="mt-1 radio radio-info">
									<input type="radio" checked name="ClassID" class="css-checkbox" value="1" />
									<span class="input-span"></span>Nhập tàu
								</label>	
								<label class="mt-1 ml-3 radio radio-info">
									<input type="radio" name="ClassID" class="css-checkbox" value="2" />
									 <span class="input-span"></span>Xuất tàu
								</label>
							</div>
						</div>
						<div class="row" style="margin-top: 10px;">
							<div class="col-lg-6 col-md-6 col-sm-6 col-xs-6 mb-3">
								<div class="row">
									<input id="VoyageKey" class="form-control form-control-sm" type="text" hidden>

									<label class="ml-3" style="width: 5.5rem; margin-top: 0.4rem">Thông tin tàu</label>		
									<input id="VesselName" placeholder="Tên tàu | Chuyến nhập | Chuyến xuất" style="border-radius: 5px; margin-left: 1rem; padding-left: 7.5px; border-color: rgba(0, 0, 0, .1); border-width: 1px; height: 2rem; width: 16.5rem" type="text">

									<!-- -->
									<button id="chooseVessel" class="btn btn-success btn-icon-only btn-circle btn-sm btn-air ml-2" style="height: 1.65rem; width: 1.65rem" title="Chọn tàu">
										<i class="ti-plus"></i>
									</button>

									<button id="nochooseVessel" class="btn btn-danger btn-icon-only btn-circle btn-sm btn-air ml-2" style="height: 1.65rem; width: 1.65rem" title="Bỏ chọn">
										<i class="ti-close"></i>
									</button>
								</div>
								
								<div class="row" style="margin-top: 10px;">
									<div class="col-md-12 col-sm-12">
										<div class="row">
										<div class="col-md-3 text-center">
											<button id="MStart" class="btn btn-outline-info btn-sm btn-loading mr-1" style="width: 100%;" >
												<span class="btn-icon"><i class="ti-control-play"></i>Bắt đầu</span>
											</button>
										</div>
										<div class="col-md-3 text-center">
											<button id="MSuccess" class="btn btn-outline-success btn-sm btn-loading mr-1" style="width: 100%;" >
												<span class="btn-icon"><i class="ti-thumb-up"></i>Hoàn tất</span>
											</button>
										</div>
										<div class="col-md-3 text-center">
											<button id="MEdit" class="btn btn-outline-warning btn-sm btn-loading mr-1" style="width: 100%;" >
												<span class="btn-icon"><i class="ti-pencil-alt"></i>Điều chỉnh</span>
											</button>
										</div>
										<div class="col-md-3 text-center">
											<button id="MCancel" class="btn btn-outline-danger btn-sm btn-loading mr-1" style="width: 100%;" >
												<span class="btn-icon"><i class="ti-control-stop"></i>Hủy công việc</span>
											</button>
										</div>
									</div>
			                        </div>
									
									<div class="col-md-3 col-sm-0">
			                        </div>
								</div>
							</div>								
							<div class="col-lg-6 col-md-6 col-sm-6 col-xs-6 mb-3">
								<div class="row">
									<label class="ml-3" style="width: 6rem; margin-top: 0.4rem">ETA/ ETD</label>		
									<input id="ETA" placeholder="ETA" style="border-radius: 5px; margin-left: 1rem; padding-left: 7.5px; border-color: rgba(0, 0, 0, .1); border-width: 1px; height: 2rem; width: 12rem" type="text">
									<input id="ETD" placeholder="ETD" style="border-radius: 5px; margin-left: 1rem; padding-left: 7.5px; border-color: rgba(0, 0, 0, .1); border-width: 1px; height: 2rem; width: 12rem" type="text">
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="row ibox-footer border-top-0">
				<div class="col-md-12 col-sm-12 col-xs-12 table-responsive" id="tableIn">
					<table id="contenttable" class="table table-striped display nowrap" cellspacing="0" style="min-width: 100%;"></table>
				</div>
				<div class="col-md-12 col-sm-12 col-xs-12 table-responsive" id="tableOut">
					<table id="contenttable2" class="table table-striped display nowrap" cellspacing="0" style="min-width: 100%;"></table>
				</div>
				<div class="col-md-12 col-sm-12 col-xs-12 table-responsive" style="font-weight:600;font-size: 16px;padding-top:20px;padding-bottom: 10px;" >
					Giám sát công việc
				</div>
				<div class="col-md-12 col-sm-12 col-xs-12 table-responsive" >
					<table id="giamsat" class="table table-striped display nowrap" cellspacing="0" style="min-width: 100%;"></table>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Vessel modal-->
<div class="modal fade" id="vessel-modal" tabindex="-1" role="dialog" aria-labelledby="groups-modalLabel-1" aria-hidden="true" data-whatever="id" style="padding-left: 2%; padding-top: 2%">
	<div class="modal-dialog" role="document" style="min-width: 1024px!important">
		<div class="modal-content" style="border-radius: 4px">
			<div class="modal-header">
				<h5 class="modal-title text-primary" id="groups-modalLabel-1">Danh mục tàu</h5>
				<button id="VesselSearch" class="btn btn-outline-warning btn-sm btn-loading mr-1" 
									data-loading-text="<i class='la la-spinner spinner'></i>Nạp dữ liệu"
								 	title="Nạp dữ liệu">
					<span class="btn-icon"><i class="ti-search"></i>Nạp dữ liệu</span>
				</button>
			</div>
			<div class="modal-body" style="padding: 0px 15px 15px 15px">
				<div class="row mb-0 border-e border-top-0 pb-1 pt-3">
					<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
							<div class="row">
								<div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
									<div class="row form-group">
										<label class="col-md-2 col-sm-4 col-xs-4 col-form-label">Tàu</label>
										<input id="VesselNameFilter" class="col-md-8 col-sm-10 col-xs-10 form-control form-control-sm" placeholder="Tên tàu" type="text">
									</div>
								</div>
								<div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
									<div class="row form-group">
										<label class="col-md-2 col-sm-2 col-xs-2 col-form-label">Năm</label>
										<div class="col-md-8 col-sm-10 col-xs-10 input-group input-group-sm">
											<select id="YearFilter" data-width="100%" data-style="btn-default btn-sm"
													title="Năm"
													style="width: 80%; border-radius: 2px; border-color: rgba(0, 0, 0, .1);">
												<% for (let i = 2016; i < 2026; i++){ %>
													<option value="<%= i %>">
														<%= i %>		
													</option>
												<% } %>												
											</select>
										</div>										
									</div>
								</div>
								<div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
									<div class="row form-group">
										<label class="radio radio-success ml-5 mt-1">
					                        <input type="radio" checked name="VesselFilter" class="css-checkbox" value="1" />
					                            <span class="input-span"></span>Đến cảng
					                    </label>								

										<label class="radio radio-success ml-3 mt-1 mr-3">
					                       <input type="radio" name="VesselFilter" class="css-checkbox" value="2" />
					                            <span class="input-span"></span>Rời cảng
					                    </label>   
									</div>
								</div>
							</div>
					</div>
				</div>
				<div class="row ibox-footer border-top-0 mt-3">
					<div class="col-md-12 col-sm-12 col-xs-12 table-responsive">
						<table id="tblVessel" class="table table-striped display nowrap" cellspacing="0" style="width: 99.5%">
							<thead>
								<tr style="width: 100%">
									<th col-name="STT">STT</th>
									<th col-name="VoyageKey"></th>
									<th col-name="VesselID">Mã tàu</th>
									<th col-name="VesselName">Tên tàu</th>
									<th col-name="InboundVoyage">Chuyến nhập</th>
									<th col-name="OutboundVoyage">Chuyến xuất</th>
									<th col-name="ETA">ETA</th>
									<th col-name="ETD">ETD</th>
									<th col-name="Status">Status</th>
									<th col-name="InLane">Lane nhập</th>
									<th col-name="OutLane">Lane xuất</th>
								</tr>
							</thead>
							<tbody>
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<div  style="margin: 0 auto!important;">
					<button class="btn btn-sm btn-rounded btn-gradient-blue btn-labeled btn-labeled-left btn-icon" id="apply-vessel" data-dismiss="modal">
						<span class="btn-label"><i class="ti-check"></i></span>Xác nhận</button>
					<button class="btn btn-sm btn-rounded btn-gradient-peach btn-labeled btn-labeled-left btn-icon" data-dismiss="modal">
						<span class="btn-label"><i class="ti-close"></i></span>Đóng</button>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Add more row modal --> 
<div class="modal fade" id="add-row-modal" tabindex="-1" role="dialog" aria-labelledby="groups-modalLabel-1" aria-hidden="true" data-whatever="id" style="padding-left: 14%; top: 200px">
	<div class="modal-dialog" role="document" style="width: 300px!important">
		<div class="modal-content" style="border-radius: 4px">
			<div class="modal-body">
				<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
					<div class="row form-group">
						<label class="col-md-4 col-sm-4 col-xs-4 col-form-label" style="text-align: right; margin-right: 5px">Số dòng</label>
						<input id="rowsNumeric" class="col-md-6 col-sm-6 col-xs-6 form-control form-control-sm border-e" placeholder="Số dòng" type="number" value="1">
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<div  style="margin: 0 auto!important;">
					<button class="btn btn-sm btn-rounded btn-gradient-blue btn-labeled btn-labeled-left btn-icon" id="apply-add-row" data-dismiss="modal">
						<span class="btn-label"><i class="ti-check"></i></span>Xác nhận</button>
					<button class="btn btn-sm btn-rounded btn-gradient-peach btn-labeled btn-labeled-left btn-icon" data-dismiss="modal">
						<span class="btn-label"><i class="ti-close"></i></span>Đóng</button>
				</div>
			</div>
		</div>
	</div>
</div>

<table id="set_value_box" style="display:none" >
	<tr>
		<td align="center" valign="middle">
			<div style="width: 400px;max-width: 98vw;background: #5e8ca0bf;border:1px solid #b6b6b6;border-radius: 4px;margin:0px !important;position: relative;">
				<div style="position: absolute;right: 5px;top:5px;background:red;color:#ffffff;width: 30px;height: 30px;padding: 5px;font-size: 20px;line-height: 14px;cursor: pointer;" id="close_select_box">x</div>
				<div id="BNAME" style="width: 100%;background: #0a455f;color: #ffffff;font-size: 18px; padding: 6px;">LOADING...</div>
				<div class="container" style=" margin: 0px !important;    width: 100%;    max-width: 100%; padding:0px">
					<div class="row" style=" width: 100%; padding:0px">
					  <div class="col-md-6 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-TransitName" readonly placeholder="Nhập giao thẳng" />
					  </div>
					  <div class="col-md-6 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-ItemName" readonly placeholder="Tôn cuộn" />
					</div>
					<div class="col-md-12 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-TruckNo" placeholder="Số xe" />
					</div>
					<div class="col-md-4 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-Quantity" type="number" placeholder="Số lượng" />
					</div>
					<div class="col-md-4 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-McWeight" placeholder="Trọng lượng" />
					</div>
					<div class="col-md-4 col-xs-12" style="padding:5px">
						<select class="setinp" id="set-Cellars" placeholder="Hầm" readonly >
							<option value="0">Hầm</option>
						</select>
					</div>
					<div class="col-md-12 col-xs-12" style="padding:5px">
						<input autocomplete="off" class="setinp" id="set-Note" placeholder="Ghi chú ..." />
					</div>
					</div>
					<div style="padding:10px"></div>
					<div class="setvaluebtn" id="setvaluebtn"><span>XÁC NHẬN</span></div>
				</div>
			</div>
		</td>
	</tr>
</table>

<script type="text/javascript">
	$(document).ready(function () {


		let jobModeList=<%- JSON.stringify(locals.jobModeList || []) %>;
        let classList = <%- JSON.stringify(locals.classList || []) %>;
        let methodList=<%- JSON.stringify(locals.methodList || []) %>;
        let loadCustomer=<%- JSON.stringify(locals.loadCustomer || []) %>;
        let unitList=<%- JSON.stringify(locals.unitList || []) %>;
        let itemList=<%- JSON.stringify(locals.itemList || []) %>;
        let customerList=<%- JSON.stringify(locals.customerList || []) %>;
        let customerTypeList=<%- JSON.stringify(locals.customerTypeList || []) %>;
        let transitList=<%- JSON.stringify(locals.transitList || []) %>;

		let jobModeList1=jobModeList.filter(itm=>(itm.ClassID+'')=='1');
		let jobModeList2=jobModeList.filter(itm=>(itm.ClassID+'')=='2');

		let methodList1=methodList.filter(itm=>jobModeList1.map(itx=>itx.JobModeID).indexOf(itm.JobModeID)!==-1);
		let methodList2=methodList.filter(itm=>jobModeList2.map(itx=>itx.JobModeID).indexOf(itm.JobModeID)!==-1);
		console.log(methodList1,jobModeList1)

		var _columns2		= [
                { width: "30px", data: "STT", name: "STT", title: "STT", className: "text-center  editor-cancel", targets: 0 },
                { data: "LDStatus", name: "LDStatus", title: "Công việc", className: "text-center", targets: 1 },
                { data: "BookingNo", name: "BookingNo", title: "Số booking", className: "text-center", targets: 2 },
				{ data: "JobModeID", name: "JobModeID", title: "Phương án", className: "text-center autocomplete",list:jobModeList2.map((itm)=>{return {value:itm.JobModeID, label:itm.JobModeName}}), targets:2 },
				{ data: "MethodID", name: "MethodID", title: "Phương thức", className: "text-center autocomplete",list:methodList2.map((itm)=>{return {value:itm.MethodID, label:itm.MethodName}}), targets:3 },
				{ data: "ItemID", name: "ItemID", title: "Hàng hóa", className: "text-center autocomplete",list:itemList.map((itm)=>{return {value:itm.ItemID, label:itm.ItemName}}), targets: 4} ,
				{ data: "UnitID", name: "UnitID", title: "Đơn vị tính", className: "text-center autocomplete",list:unitList.map((itm)=>{return {value:itm.UnitID, label:itm.UnitName}}), targets:5 },
				{ data: "Quantity", name: "Quantity", title: "Số lượng", className: "text-center data-type-numeric", targets:6 },
				{ data: "CargoWeight", name: "CargoWeight", title: "Trọng lượng", className: "text-center data-type-numeric", targets:7 },
                { data: "Volume", name: "Volume", title: "Thể tích", className: "text-center data-type-numeric", targets:8 },
                { data: "CusID", name: "CusID", title: "Khách hàng",className: "text-center",targets:9 },
				{ data: "CusName", name: "CusName", title: "Tên khách hàng", className: "text-center autocomplete",list:customerList.map((itm)=>{return {value:itm.CusID, label:itm.CusName}}), targets:10 },
				{ data: "TransitID", name: "TransitID", title: "Loại hình", className: "text-center autocomplete",list:transitList.map((itm)=>{return {value:itm.TransitID, label:itm.TransitName}}), targets:11 },
				{ data: "Remark", name: "Remark", title: "Ghi chú", className: "text-center ", targets:12 },
				{ data: "rowguid", name: "rowguid", title: "rowguid", visible: false, targets: 13 },
            ],
			_columns 		= [
				{ width: "30px", data: "STT", name: "STT", title: "STT", className: "text-center  editor-cancel", targets: 0 },
                { data: "LDStatus", name: "LDStatus", title: "Công việc", className: "text-center", targets: 1 },
                { data: "BillOfLading", name: "BillOfLading", title: "Số vận đơn", className: "text-center", targets: 1 },
				{ data: "JobModeID", name: "JobModeID", title: "Phương án", className: "text-center autocomplete",list:jobModeList1.map((itm)=>{return {value:itm.JobModeID, label:itm.JobModeName}}), targets:2 },
				{ data: "MethodID", name: "MethodID", title: "Phương thức", className: "text-center autocomplete", targets:3,list:methodList1.map((itm)=>{return {value:itm.MethodID, label:itm.MethodName}}), targets:3 },
				{ data: "ItemID", name: "ItemID", title: "Hàng hóa", className: "text-center autocomplete",list:itemList.map((itm)=>{return {value:itm.ItemID, label:itm.ItemName}}), targets: 4} ,
				{ data: "UnitID", name: "UnitID", title: "Đơn vị tính", className: "text-center autocomplete",list:unitList.map((itm)=>{return {value:itm.UnitID, label:itm.UnitName}}), targets:5 },
				{ data: "Quantity", name: "Quantity", title: "Số lượng", className: "text-center data-type-numeric", targets:6 },
				{ data: "CargoWeight", name: "CargoWeight", title: "Trọng lượng", className: "text-center data-type-numeric", targets:7 },
                { data: "Volume", name: "Volume", title: "Thể tích", className: "text-center data-type-numeric", targets:8 },
                { data: "CusID", name: "CusID", title: "Khách hàng",className: "text-center ",targets:9 },
				{ data: "CusName", name: "CusName", title: "Tên khách hàng", className: "text-center autocomplete",list:customerList.map((itm)=>{return {value:itm.CusID, label:itm.CusName}}), targets:10 },
				{ data: "TransitID", name: "TransitID", title: "Loại hình", className: "text-center autocomplete",list:transitList.map((itm)=>{return {value:itm.TransitID, label:itm.TransitName}}), targets:11 },
				{ data: "Remark", name: "Remark", title: "Ghi chú", className: "text-center ", targets:12 },
				{ data: "rowguid", name: "rowguid", title: "rowguid", visible: false, targets: 13 },
            
			],
			_vesselColumns 	= ["STT", "VoyageKey", "VesselID", "VesselName", "InboundVoyage", "OutboundVoyage", "ETA", "ETD", "Status", "InLane", "OutLane"],
			tbl 			= $("#contenttable"),
			tbl2 			= $("#contenttable2"),
			tblVessel 		= $("#tblVessel"),
			vesselModal 	= $("#vessel-modal"),
			fQuayNew,
			localForeignList = [{value:'L', label:'Nội'}, {value:'F', label:'Ngoại'}],
			parentMenuList 	= {};
			_columns2=_columns2.map((itm,ii)=>({...itm,targets:ii}));
			_columns=_columns.map((itm,ii)=>({...itm,targets:ii}));



			let giamsat_cols 		= [
				{ width: "30px", data: "STT", name: "STT", title: "STT", className: "text-center  editor-cancel", targets: 0 },
                { data: "TruckNo", name: "TruckNo", title: "Số xe", className: "text-center", targets: 1 },
                { data: "BillOfLading", name: "BillOfLading", title: "Số Bill/Booking", className: "text-center", targets: 1 ,render:(data,type,row)=>{return row.BillOfLading?row.BillOfLading:row.BookingNo}},
				{ data: "JobModeName", name: "JobModeName", title: "Phương án", className: "text-center "},
				{ data: "MethodName", name: "MethodID", title: "Phương thức", className: "text-center "},
				{ data: "ItemName", name: "ItemName", title: "Hàng hóa", className: "text-center "} ,
				{ data: "Quantity", name: "Quantity", title: "Số lượng", className: "text-center data-type-numeric", targets:6 },
				{ data: "McWeight", name: "McWeight", title: "Trọng lượng", className: "text-center data-type-numeric", targets:7 },
                { data: "DeviceName", name: "DeviceName", title: "Thiết bị thực hiện",className: "text-center" },
				{ data: "WorkerGroupName", name: "WorkerGroupName", title: "Tổ công nhân", className: "text-center" },
				{ data: "CreateTime", name: "CreateTime", title: "Ngày hoàn tất cầu tàu", className: "text-center",render:(data,type,row)=>{return row.CreateTime?moment(row.CreateTime).format('YYYY-MM-DD HH:mm:ss'):''}},
				{ data: "FinishDate", name: "FinishDate", title: "Ngày hoàn tất bãi", className: "text-center",render:(data,type,row)=>{return row.FinishDate?moment(row.FinishDate).format('YYYY-MM-DD HH:mm:ss'):''}},
				{ data: "Block", name: "Block", title: "Vị trí bãi", className: "text-center ", targets:12 },
            
			];
			giamsat_cols=giamsat_cols.map((itm,ii)=>({...itm,targets:ii}));

		$('#giamsat').newDataTable({
			columnDefs: giamsat_cols,
			order: [[ 0, 'asc' ]],
			paging: false,
            keys:true,
            autoFill: {
                focus: 'focus'
            },
            select: true,
            rowReorder: false,
		});
		tbl.newDataTable({
			columnDefs: _columns,
			order: [[ 0, 'asc' ]],
			paging: false,
            keys:true,
            autoFill: {
                focus: 'focus'
            },
            select: true,
            rowReorder: false,
		});
		//tbl.editableTableWidget({editor: $("#editor-input1")});

		/* Initial table contenttable 2 format */
		tbl2.newDataTable({
			columnDefs: _columns2,
			order: [[ 0, 'asc' ]],
			paging: false,
            keys:true,
            autoFill: {
                focus: 'focus'
            },
            select: true,
            rowReorder: false,
		});
		//tbl2.editableTableWidget({editor: $("#editor-input2")});

		/* Initial vessel table */	
		tblVessel.newDataTable({
			scrollY: '30vh',
			columnDefs: [
				{ type: "num", className: "text-center", targets: _vesselColumns.indexOf('STT')},		
				{ className: "text-center", targets: _vesselColumns.getIndexs(["VesselName", "InboundVoyage", "OutboundVoyage", "ETA", "ETD", "InLane", "OutLane"])},
				{ className: "hiden-input", targets: _vesselColumns.getIndexs(["VoyageKey", "VesselID", "Status"])},
			],
			order: [[ _vesselColumns.indexOf('STT'), 'asc' ]],
			paging: false,
            keys:true,
            autoFill: {
                focus: 'focus'
            },
            select: {
            	style: 'single',
            	info: false,
            },
            buttons: [],
            rowReorder: false,
            arrayColumns: _vesselColumns,
		});

		$('#vessel-modal').on('shown.bs.modal', function(e){
			$($.fn.dataTable.tables(true)).DataTable().columns.adjust();
		});

		$("#VesselSearch").on('click', function(){
			tblVessel.waitingLoad();
			var formData = {
				filter:{
					Status: $("input[type='radio'][name='VesselFilter']:checked").val(),
					VesselName:{
						operation: 'like',
						value: $('#VesselNameFilter').val()
					}
				}
			};			

		    $.ajax({
				url: "/DataBulk/ManifestMonitor/loadVesselVisit",
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function (data) {
					var rows = [];
					tblVessel.dataTable().fnClearTable();
					if(data.data.length > 0) {
						for (i = 0; i < data.data.length; i++) {
							var rData = data.data[i], r = [];
							$.each(_vesselColumns, function(idx, colname){
								var val = "";
								switch(colname){
									case "STT": 
										val = i+1; 
										break;
									case "ETA":
									case "ETD":
										val = getDateTime(rData[colname]);
										break;
									default:
										val = (rData[colname] ? rData[colname] : '');
										break;	
								}
								r.push(val);
							});
							rows.push(r);
						}
					}
					tblVessel.dataTable().fnClearTable();
				    if(rows.length > 0){
						tblVessel.dataTable().fnAddData(rows);
			    	}
			    
				},
				error: function(err){
					tblVessel.dataTable().fnClearTable();
					console.log(err);
				}
			});
		});

		$("#chooseVessel").on('click', function(){
			$('#vessel-modal').modal("show");
			$('#VesselSearch').trigger('click');
			sumNumRows = 0;
			$("#YearFilter").val(new Date().getFullYear());

		});	

		$("#nochooseVessel").on('click', function(){
			$('#inputManifestForm').trigger("reset");
			tbl.dataTable().fnClearTable();
			$("#VesselName").val('');
			$("#InboundVoyage").val('');
			$("#OutboundVoyage").val('');
			$("#ETA").val('');
			$("#ETD").val('');
		});

		/* Add new rows */
		var numCount = 0;
       	// Add rows event
       	$('#addrow').on('click', function () {
			if ($('#VoyageKey').val() == ''){
				toastr['error']('Vui lòng chọn tàu trước khi Thêm mới dòng!');
				return;
			}
		var currentTable;
		if ($('input[name="ClassID"]:checked').val() == '1') {
			currentTable = tbl;
		} else {
			currentTable = tbl2;
		}
		currentTable.addRows();
		});

       	
		/* Change ClassID selected radio event */
		$("#tableIn").show();
		$("#tableOut").hide();
	    $('input[type=radio][name=ClassID]').change(function() {
			$("#tableIn").hide();
			$("#tableOut").hide();
	    	if (this.value == 1){	    		
				$("#tableIn").show();
	    	}
	    	else if (this.value == 2){	    		
	    		$("#tableOut").show();
	    	}
	    });


		$(document).on("dblclick", "#tblVessel tbody tr",  function(){
       		var VesselData 		= tblVessel.getSelectedRows().data().toArray()[0],
       			VoyageKey		= VesselData[_vesselColumns.indexOf("VoyageKey")],
       			VesselName 		= VesselData[_vesselColumns.indexOf("VesselName")],
       			InboundVoyage 	= VesselData[_vesselColumns.indexOf("InboundVoyage")],
       			OutboundVoyage 	= VesselData[_vesselColumns.indexOf("OutboundVoyage")],
       			InLane 			= VesselData[_vesselColumns.indexOf("InLane")],
       			OutLane 		= VesselData[_vesselColumns.indexOf("OutLane")],
       			ETA 			= VesselData[_vesselColumns.indexOf("ETA")],
       			ETD 			= VesselData[_vesselColumns.indexOf("ETD")];

       		$("#VoyageKey").val(VoyageKey);
       		$("#VesselName").val(VesselName + " | " + InboundVoyage + " | " + OutboundVoyage);
       		$("#InboundVoyage").val(InboundVoyage);
       		$("#OutboundVoyage").val(OutboundVoyage);
       		$("#ETA").val(ETA);
       		$("#ETD").val(ETD);

       		$('#search').trigger('click');
       		vesselModal.modal('hide');
       	});

		$("#apply-vessel").on("click", function(){
       		var tblVesselSelectedRows = tblVessel.getSelectedRows().data().toArray()[0];
			console.log(tblVessel.getSelectedRows().data().toArray(),tblVesselSelectedRows);
       			VoyageKey		= tblVesselSelectedRows[_vesselColumns.indexOf("VoyageKey")],
       			VesselName 		= tblVesselSelectedRows[_vesselColumns.indexOf("VesselName")],
       			InboundVoyage 	= tblVesselSelectedRows[_vesselColumns.indexOf("InboundVoyage")],
       			OutboundVoyage 	= tblVesselSelectedRows[_vesselColumns.indexOf("OutboundVoyage")],
       			InLane 			= tblVesselSelectedRows[_vesselColumns.indexOf("InLane")],
       			OutLane 		= tblVesselSelectedRows[_vesselColumns.indexOf("OutLane")],
       			ETA 			= tblVesselSelectedRows[_vesselColumns.indexOf("ETA")],
       			ETD 			= tblVesselSelectedRows[_vesselColumns.indexOf("ETD")];

       		$("#VoyageKey").val(VoyageKey);
       		$("#VesselName").val(VesselName + " | " + InboundVoyage + " | " + OutboundVoyage);
       		$("#InboundVoyage").val(InboundVoyage);
       		$("#OutboundVoyage").val(OutboundVoyage);
       		$("#ETA").val(ETA);
       		$("#ETD").val(ETD);

       		$('#search').trigger('click');
       		vesselModal.modal('hide');
       	});
       	
       	$('#search').on("click", function(){
			/* Load data to datatable */
			// Get data input
			var btn 					= $(this),
				VoyageKey				= $("#VoyageKey").val(),
				IsLocalForeign			= $("input[name='IsLocalForeign']:checked").val(),
				ClassID					= $("input[name='ClassID']:checked").val();

			if (VoyageKey == ''){
				toastr['error']('Vui lòng chọn tàu trước khi load dữ liệu!');
				return;
			}

			var formData = {
				filter:{
					'VoyageKey': 				VoyageKey,
					//'IsLocalForeign': 			IsLocalForeign,
					//'ClassID': 					ClassID,
				}
			};

			tbl.waitingLoad();
			tbl2.waitingLoad();
			//btn.button('loading');

			$.ajax({
				url: "/DataBulk/ManifestMonitor/get",
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function (data) {
					let ii=0,jj=0;
					var rowsIn = [], rowsOut = [], index1 = 1, index2 = 1;
					if(data.data.length > 0) {
						for (i = 0; i < data.data.length; i++) {
							var rData = data.data[i], r = [];
							if (data.data[i]['ClassID'] == 1){
								rowsIn.push({...data.data[i],STT:++ii});
							}
							else{
								rowsOut.push({...data.data[i],STT:++jj});
							}
						}
					}
					tbl.dataTable().fnClearTable();
					tbl2.dataTable().fnClearTable();
		        	if (rowsIn.length > 0){
						tbl.dataTable().fnAddData(rowsIn);
		        	}
					console.log(rowsOut);
		        	if (rowsOut.length > 0){
						tbl2.dataTable().fnAddData(rowsOut);
		        	}	
		        	//btn.button('reset');
				},
				error: function(err){
					console.log(err);
					//btn.button('reset');
				}
			});
			formData.filter.MethodID={operation:'!=',value:'TAU-XE'}
			$.ajax({
				url: "/DataBulk/ManifestMonitor/loadTallyJob",
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function (data) {
					let dt=((data.data||[]).map((itm,ii)=>({...itm,STT:(ii+1)})));
					$('#giamsat').dataTable().fnClearTable();
					if(dt.length>0)
					$('#giamsat').dataTable().fnAddData((data.data||[]).map((itm,ii)=>({...itm,STT:(ii+1)})));
				},
				error: function(err){
					console.log(err);
					//btn.button('reset');
				}
			});
		});
		$(document).on('click','#MStart',function(){
			let ClassID=$('input[name="ClassID"]:checked').val();
			let tbl=$('#contenttable');
			if(ClassID=='1')
				tbl=$('#contenttable');
			else
				tbl=$('#contenttable2');
			let data=tbl.DataTable().rows('.selected').data().toArray();
			console.log(data)
			if(!data || (data.length==0)){
				toastr["error"]('Chưa chọn dòng !');
                return;
			}
			$.ajax({
                url: "/DataBulk/ManifestMonitor/setStatus",
                dataType: 'json',
                data: {rowguid:data[0].rowguid,LDStatus:'B'},
                type: 'POST',
                success: function (data) {
                    if(data.deny) {
                        toastr["error"](data.deny);
                        return;
                    }
					if(data.success)
					toastr["success"]('Cập nhật thành công !');
					$('#search').trigger('click');
                },
                error: function(err){
                	toastr["error"]("Error!");
                	console.log(err);
                }
            });
		});
		$(document).on('click','#MSuccess',function(){
			let ClassID=$('input[name="ClassID"]:checked').val();
			let tbl=$('#contenttable');
			if(ClassID=='1')
				tbl=$('#contenttable');
			else
				tbl=$('#contenttable2');
			let data=tbl.DataTable().rows('.selected').data().toArray();
			if(!data || (data.length==0)){
				toastr["error"]('Chưa chọn dòng !');
                return;
			}
			$.ajax({
                url: "/DataBulk/ManifestMonitor/setStatus",
                dataType: 'json',
                data: {rowguid:data[0].rowguid,LDStatus:'S'},
                type: 'POST',
                success: function (data) {
                    if(data.deny) {
                        toastr["error"](data.deny);
                        return;
                    }
					if(data.success)
					toastr["success"]('Cập nhật thành công !');
					$('#search').trigger('click');
                },
                error: function(err){
                	toastr["error"]("Error!");
                	console.log(err);
                }
            });
		});
		$(document).on('click','#MEdit',function(){
			if($('#giamsat tr.selected').length<=0)
				return toastr['error']('Chưa chọn dữ liệu !');
			let rowdata=$('#giamsat').DataTable().row('.selected').data();
			$('#BNAME').html(rowdata.BillOfLading||rowdata.BookingNo);
			$('#set_value_box').show();
			$('#set-TransitName').val(rowdata.JobModeName);
			$('#set-ItemName').val(rowdata.ItemName);
			$('#set-TruckNo').val(rowdata.TruckNo);
			$('#set-Quantity').val(rowdata.Quantity);
			$('#set-McWeight').val(rowdata.McWeight);                          
			$('#set-Quantity').attr('max',9999999);
			$('#set-McWeight').attr('max',9999999);
			let Cellars=parseInt(rowdata.Cellars||'0');
			let html=`<option value="0">Hầm</option>`;
			for (let ii = 0; ii < Cellars; ii++) {
				html+=`<option value="${ii+1}">${ii+1}</option>`;
			}
			$('#set-Cellars').html(html);
			$('#set-Cellars').val(rowdata.Cellar);
			$('#set-Note').val(rowdata.Note);
			$('#setvaluebtn').attr('rowguid',rowdata.rowguid);

		});
		$(document).on('click','#setvaluebtn',function(){
			let ups={
				rowguid:$(this).attr('rowguid'),
				TruckNo:$('#set-TruckNo').val(),
				Quantity:$('#set-Quantity').val(),
				McWeight:$('#set-McWeight').val(),
				Cellar:$('#set-Cellars').val(),
				Note:$('#set-Note').val()
			}
			$.ajax({
				url: "/DataBulk/ManifestMonitor/editTally",
				dataType: 'json',
				data: ups,
				type: 'POST',
				success: function (res) {
					if(res.error){
						return toastr.error(res.error.message||res.error);
					} 
					if(res.data){
						toastr.success('Cập nhật thành công !!');
						$('#set_value_box').hide();
						$('#search').trigger('click');
					}                                
				},
				error: function (err) {
					tbl.dataTable().fnClearTable();
					toastr["error"]("Error!");
					console.log(err);
				}
            });
		});
		$(document).on('click','#close_select_box',function(){
                        $('#select_box').hide();
                        $('#select_method_box').hide();
                        $('#set_value_box').hide();
                    })
		$(document).on('input','#set-Quantity',function(){
                        if($(this).attr('max') && parseFloat($(this).val())>parseFloat($(this).attr('max'))){
                            $(this).val($(this).attr('max'))
                        }
                        let oncew=window.rowdata.Quantity?(window.rowdata.CargoWeight/window.rowdata.Quantity):0;
                        let val=parseFloat($(this).val());
                        $('#set-McWeight').val((val*oncew).toFixed(3).replace(/[.,]000$/, "")||0);
                    })
                    $(document).on('input','#set-McWeight',function(){
                        if($(this).attr('max') && parseFloat($(this).val())>parseFloat($(this).attr('max'))){
                            $(this).val($(this).attr('max'))
                        }
                        let val=parseFloat($(this).val());
                        $('#set-McWeight').val((val).toFixed(3).replace(/[.,]000$/, "")||0);
                    })
		$(document).on('click','#MCancel',function(){
			let ClassID=$('input[name="ClassID"]:checked').val();
			let tbl=$('#contenttable');
			if(ClassID=='1')
				tbl=$('#contenttable');
			else
				tbl=$('#contenttable2');
			let data=tbl.DataTable().rows('.selected').data().toArray();
			if(!data || (data.length==0)){
				toastr["error"]('Chưa chọn dòng !');
                return;
			}
			$.ajax({
                url: "/DataBulk/ManifestMonitor/setStatus",
                dataType: 'json',
                data: {rowguid:data[0].rowguid,LDStatus:'A'},
                type: 'POST',
                success: function (data) {
                    if(data.deny) {
                        toastr["error"](data.deny);
                        return;
                    }
					if(data.success)
					toastr["success"]('Cập nhật thành công !');
					$('#search').trigger('click');
                },
                error: function(err){
                	toastr["error"]("Error!");
                	console.log(err);
                }
            });
		});
		/* SAVE EVENT */
		$('#save').on('click', function(){
			if ($('#VoyageKey').val() == ''){
				toastr['error']('Vui lòng chọn tàu trước và thêm dữ liệu trước khi Lưu!');
				return;
			}

			if(
				tbl.DataTable().rows( '.addnew, .editing' ).data().toArray().length == 0 &&
				tbl2.DataTable().rows( '.addnew, .editing' ).data().toArray().length == 0
			){
            	$('.toast').remove();
            	toastr["info"]("Không có dữ liệu thay đổi!");
            }else{
            	if(tbl.getAddNewData().length > 0 || tbl2.getAddNewData().length > 0){            		
            		// BULK_IN
            		if ($('input[type=radio][name=ClassID]:checked').val() == 1){ 
            			newData = tbl.getAddNewData();

            			for (i = 0; i < newData.length; i++){
							if (newData[i]['BillOfLading'] == ''){
								toastr['error']("Vui lòng nhập Số vận đơn!");
								return;
							}
						}
            		}
            		// BULK_OUT
            		else{ 
            			newData = tbl2.getAddNewData();

            			for (i = 0; i < newData.length; i++){
							if (newData[i]['BookingNo'] == ''){
								toastr['error']("Vui lòng nhập Số booking!");
								return;
							}
						}
            		}	
	            }

            	$.confirm({
		            title: 'Thông báo!',
		            type: 'orange',
		            icon: 'fa fa-warning',
		            content: 'Tất cả các thay đổi sẽ được lưu lại!\nTiếp tục?',
		            buttons: {
		                ok: {
		                    text: 'Xác nhận lưu',
		                    btnClass: 'btn-warning',
		                    keys: ['Enter'],
		                    action: function(){
		                        saveData();
		                    }
		                },
		                cancel: {
		                    text: 'Hủy bỏ',
		                    btnClass: 'btn-default',
		                    keys: ['ESC']
		                }
		            }
		        });
            }
		});

		function saveData(){
			var newData = tbl.getAddNewData(),
				newStockBulkData = [],
				newQuayData = [],
				haveBookingNo = false,
				currentTime = getDateTimeFormatString(new Date()); 

			if ($('input[type=radio][name=ClassID]:checked').val() == 2){
				newData = tbl2.getAddNewData();
				haveBookingNo = true;
			}

			for (i = 0; i < newData.length; i++){
				var objStockData = {	
						'VoyageKey': 	$("#VoyageKey").val(),
						'BillOfLading': haveBookingNo ? '' : newData[i]['BillOfLading'],
						'BookingNo': 	haveBookingNo ? newData[i]['BookingNo'] : '',
						'ClassID': 		newData[i]['ClassID'],
						'IsLocalForeign': newData[i]['IsLocalForeign'],
						'CargoWeight': 	newData[i]['CargoWeight'],
						'JobModeInID': 	newData[i]['JobModeID'],
						'MethodInID': 	newData[i]['MethodID'],
						'UnitID': 		newData[i]['UnitID'],
						'JobModeOutID': '',
						'MethodOutID': 	'',
						'TransitID': 	'',
						'Area': 		'',
						'CommodityDescription': newData[i]['CommodityDescription'],
						'CntrNo': 		newData[i]['CntrNo'],
						'IsDifferent': 	'',
						'DeclareContent': '',
       					'OldVoyageKey': '',
       					'InvoiceNo': 		'',
       					'OrderNo': 		'',
       					'CusID': 		'',
       					'POL': 			newData[i]['POL'],
       					'POD': 			newData[i]['POD'],
       					'FPOD': 		newData[i]['FPOD'],
       					'Remark': 		'',
					};
				newStockBulkData.push(objStockData);

				var objQuayData = {
						'VoyageKey': 	$("#VoyageKey").val(),
						'EirNo': 		'',
						'ClassID': 		newData[i]['ClassID'],
						'IsLocalForeign': newData[i]['IsLocalForeign'],
						'BillOfLading': haveBookingNo ? '' : newData[i]['BillOfLading'],
						'BookingNo': 	haveBookingNo ? newData[i]['BookingNo'] : '',
						'VINNo': '',
						'TransitID': '',
						'CarWeight': newData[i]['CargoWeight'],
						'JobTypeID': 'DF',
						'JobStatus': 'KT',
						'StartDate': currentTime,
						'FinishDate': '',
						'JobModeInID': 	newData[i]['JobModeID'],
						'MethodInID': 	newData[i]['MethodID'],
						'JobModeOutID': '',
						'MethodOutID': 	'',
						'KeyCheck': '',
						'Sequence': '',
						'TruckNo': '',
						'Block': '',
						'Bay': '',
						'Row': '',
						'Tier': '',
						'Area': '',
						'PaymentTypeID': '',
						'BillCheck': '',
						'CargoType': 'B',
						'Remark': newData[i]['CommodityDescription'],
					};
				newQuayData.push(objQuayData);

				delete newData[i].rowguid;
			}

			if(newData.length > 0){
				var fnew = {
						'action': 'add',
		            	'child_action': '',
						'VoyageKey': $('#VoyageKey').val(),
						'data': newData,
					};
				postSave(fnew);

				/* Add stock Data */
				var fStockNew = {
						'action': 'add',
		            	'child_action': 'addStockBulk',
		            	'data': newStockBulkData,
					};
				postSave(fStockNew);

				if (!haveBookingNo){
					fQuayNew = {
						'action': 'add',
						'child_action': 'addQuayBulkInJob',
						'data': newQuayData,
					};
				}
			}

			var editData = tbl.getEditData();

			if ($('input[type=radio][name=ClassID]:checked').val() == 2){
				editData = tbl2.getEditData();
			}
			
			if(editData.length > 0){				
				var fedit = {
					'action': 'edit',
					'VoyageKey': $('#VoyageKey').val(),
					'data': editData,					
				};
				postSave(fedit);
			}
		}

		function postSave(formData){
			$.ajax({
                url: "/DataBulk/ManifestMonitor/save",
                dataType: 'json',
                data: formData,
                type: 'POST',
                success: function (data) {
                    if(data.deny) {
                        toastr["error"](data.deny);
                        return;
                    }

                    if(formData.action == 'edit'){
                    	toastr["success"]("Cập nhật thành công!");
                    	tbl.DataTable().rows( '.editing' ).nodes().to$().removeClass("editing");
                    	$('#search').trigger('click');
                    }

                    if(formData.action == 'add'){
                    	if (formData.child_action == ''){
                    		toastr["success"]("Thêm mới dữ liệu Hàng rời thành công!");
                    		return;                    		
                    	}

                    	if (formData.child_action == 'addStockBulk'){
                    		toastr["success"]("Thêm mới Stock thành công!");
                    		
                    		/* Save Job Quay */
                    		if ($('input[type=radio][name=ClassID]:checked').val() == 1){
                    			postSave(fQuayNew);
                    		}
                    	}

                    	if (formData.child_action == 'addQuayBulkInJob'){
                    		toastr["success"]("Thêm mới dữ liệu JOB QUAY thành công!");

                    		/* Socket to Tally */
                        	socket.emit('transferDataToJobQuay', JSON.stringify(formData.data));

                    		$('#search').trigger('click');
                    	}

                    }
                },
                error: function(err){
                	toastr["error"]("Error!");
                	console.log(err);
                }
            });
		}

		/* Delete event */
		$('#delete').on('click', function(){
			if(tbl.getSelectedRows().length == 0 && tbl2.getSelectedRows().length == 0){
            	$('.toast').remove();
            	toastr["info"]("Vui lòng chọn các dòng dữ liệu để xóa!");
            }
            else{
            	if (tbl.getSelectedRows().length > 0){
            		data = tbl.getSelectedRows().data().toArray()[0];

            		tbl.confirmDelete(function(data){
	            		postDel(data);
	            	});
            	}
            	else if (tbl2.getSelectedRows().length > 0){
            		data = tbl2.getSelectedRows().data().toArray()[0];

            		tbl2.confirmDelete(function(data){
	            		postDel(data);
	            	});
            	}            	
            }
		});

		function postDel(data){
			var delData = [];

			for (i = 0; i < data.length; i++){
				delData.push(data[i]);
			}

			var fdel = {
					'action': 'delete',
					'data': delData,
				};

			$.ajax({
                url: "/DataBulk/ManifestMonitor/delete",
                dataType: 'json',
                data: fdel,
                type: 'POST',
                success: function (data) {
                    if(data.deny) {
                        toastr["error"](data.deny);
                        return;
                    }

                    $("#search").trigger('click');
               		toastr["success"]("Xóa dữ liệu thành công!");
                },
                error: function(err){
                	toastr["error"]("Error!");
                	console.log(err);
                }
            });
		}

		$("#downloadFileForImport").on('click', function(){
			if ($("input[name='ClassID']:checked").val() == 1){
				var url = '/DataBulk/createXLSFormForManifestImportForClassIn';
				window.location.href = url;
			}
			else{
				var url = '/DataBulk/createXLSFormForManifestImportForClassOut';
				window.location.href = url;
			}
		});

		$("#Export").on('click', function(){
			if ($("#VoyageKey").val() == ''){
                toastr["error"]("Vui lòng chọn tàu trước khi export dữ liệu!");
                return;
            }

	    	if ($("input[name='ClassID']:checked").val() == 1){
	    		var url = "/DataBulk/createXLSForManifestExportWithClassIn";
	    		url += ('/' + $("#VoyageKey").val());
				window.location.href = url;
	    	}
	    	else{
	    		var url = "/DataBulk/createXLSForManifestExportWithClassOut";
	    		url += ('/' + $("#VoyageKey").val());
				window.location.href = url;
	    	}
	    });

	    $("#import").on("change", function(){			
			var input = this;
			var url = $(this).val();
 
			var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();
			if (input.files && input.files[0] && (ext == "xlsx" || ext =="xls"))
			{	
				var reader = new FileReader();
 
                //For Browsers other than IE.
                if (reader.readAsBinaryString) {
                    reader.onload = function (e) {
                    	// Check valid of Voyage Key
                    	if ($("#VoyageKey").val() == ''){
                    		toastr["error"]("Vui lòng chọn tàu trước khi import dữ liệu!");
                    		return;
                    	}

                    	ProcessExcel(e.target.result);
                    };
                    reader.readAsBinaryString(input.files[0]);
                    //$("#chooseVessel").trigger('click');
                }
                else{
                	reader.onload = function (e) {
                		// Check valid of Voyage Key
                    	if ($("#VoyageKey").val() == ''){
                    		toastr["error"]("Vui lòng chọn tàu trước khi import dữ liệu!");
                    		return;
                    	}

                        var data = "";
                        var bytes = new Uint8Array(e.target.result);
                        for (var i = 0; i < bytes.byteLength; i++) {
                            data += String.fromCharCode(bytes[i]);
                        }
                        ProcessExcel(data);
                    };
                    reader.readAsArrayBuffer(input.files[0]);
                }
			}
			else
			{
				toastr['error']("Vui lòng chọn file đúng định dạng");				
			}

			$("#import").val("");
		});	

		function ProcessExcel(data) {
        	//Read the Excel File data.
	        var workbook = XLSX.read(data, { type: 'binary' });
	 
	        //Fetch the name of First Sheet.
	        var firstSheet = workbook.SheetNames[0];
	 
	        //Read all rows from First Sheet into an JSON array.
	        var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);
	        
	        // Add data to manifest table
			var rows = [],
				VoyageKey = $("#VoyageKey").val(),				
				listAddEdit = [],
				formData = {
					'action': 		  'view',
					'VoyageKey': 	  VoyageKey,
					'IsLocalForeign': '',
					'ClassID': 		  '',
				};

			$.ajax({
				url: "/DataBulk/ManifestMonitor/get",
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function (data) {
					var manifestList = data.list;
					if(excelRows.length > 0) {
						for (i = 0; i < excelRows.length; i++) {
							var rData = excelRows[i], 
								r = [];
							if (!rData['Số vận đơn/ booking']){
								continue;
							}

							listAddEdit[i] = 0;
							for (j = 0; j < manifestList.length; j++){
								if (!rData['Số vận đơn']){
									if (!manifestList[j]['BillOfLading'] && manifestList[j]['BookingNo'] == rData['Số booking']){
										listAddEdit[i] = 1;
										break;
									}
								}
								else{
									if (!rData['Số booking']){
										if (!manifestList[j]['BookingNo'] && manifestList[j]['BillOfLading'] == rData['Số vận đơn'])
										{
											listAddEdit[i] = 1;
											break;
										}
									}
								}					
							}	

							if ($("input[name='ClassID']:checked").val() == 1){
								$.each(_columns, function(idx, colname){
									var val = "";
									switch(colname){
										case "VoyageKey":
											val = VoyageKey;
											break;
										case "BillOfLading":
											val = rData['Số vận đơn/ booking'] ? rData['Số vận đơn/ booking'] : '';
											break;
										case "JobModeID":
											val = rData['Mã phương án (xem ở cột L - N)'] ? rData['Mã phương án (xem ở cột L - N)'] : '';
											break;
										case "MethodID":
											val = (rData['Mã phương thức (xem ở cột Q - S)'] ? rData['Mã phương thức (xem ở cột Q - S)'] : '');
											break;
										case "CargoWeight":
											val = (rData['Trọng lượng hàng'] ? rData['Trọng lượng hàng'] : '');
											break;
										case "UnitID":
											val = (rData['Đơn vị tính (xem ở cột U - W)'] ? rData['Đơn vị tính (xem ở cột U - W)'] : '');
											break;

										case "ClassID":
											val = (rData['Nhập/ xuất tàu (Nhập = 1, Xuất = 2)'] ? rData['Nhập/ xuất tàu (Nhập = 1, Xuất = 2)'] : '');
											break;
										case "IsLocalForeign":
											val = (rData['Hàng nội/ ngoại (Nội = 1, Ngoại = 2)'] ? rData['Hàng nội/ ngoại (Nội = 1, Ngoại = 2)'] : '');									
											break;
										case "CommodityDescription":
											val = (rData['Mô tả'] ? rData['Mô tả'] : '');				
											break;
										default:
											val = (rData[colname] ? rData[colname] : '');
											break;											
									}
									r.push(val);
								});
							}
							else{
								$.each(_columns2, function(idx, colname){
									var val = "";
									switch(colname){
										case "VoyageKey":
											val = VoyageKey;
											break;
										case "BookingNo":
											val = rData['Số vận đơn/ booking'] ? rData['Số vận đơn/ booking'] : '';
											break;
										case "JobModeID":
											val = rData['Mã phương án (xem ở cột L - N)'] ? rData['Mã phương án (xem ở cột L - N)'] : '';
											break;
										case "MethodID":
											val = (rData['Mã phương thức (xem ở cột Q - S)'] ? rData['Mã phương thức (xem ở cột Q - S)'] : '');
											break;
										case "CargoWeight":
											val = (rData['Trọng lượng hàng'] ? rData['Trọng lượng hàng'] : '');
											break;
										case "UnitID":
											val = (rData['Đơn vị tính (xem ở cột U - W)'] ? rData['Đơn vị tính (xem ở cột U - W)'] : '');
											break;

										case "ClassID":
											val = (rData['Nhập/ xuất tàu (Nhập = 1, Xuất = 2)'] ? rData['Nhập/ xuất tàu (Nhập = 1, Xuất = 2)'] : '');
											break;
										case "IsLocalForeign":
											val = (rData['Hàng nội/ ngoại (Nội = 1, Ngoại = 2)'] ? rData['Hàng nội/ ngoại (Nội = 1, Ngoại = 2)'] : '');									
											break;
										case "CommodityDescription":
											val = (rData['Mô tả'] ? rData['Mô tả'] : '');				
											break;
										default:
											val = (rData[colname] ? rData[colname] : '');
											break;										
									}
									r.push(val);
								});
							}	
							rows.push(r);		
						}

						tbl.dataTable().fnClearTable();
						tbl2.dataTable().fnClearTable();
						if(rows.length > 0){
							if ($("input[name='ClassID']:checked").val() == 1){
								tbl.dataTable().fnAddData(rows);
							}
							else{
								tbl2.dataTable().fnAddData(rows);
							}
		                
							for (i = 0; i < excelRows.length; i++){
								crRow = tbl.find("tbody tr:eq(" + i + ")");
								crRow2 = tbl2.find("tbody tr:eq(" + i + ")");

								if (listAddEdit[i] == 0){
									if ($("input[name='ClassID']:checked").val() == 1){
										tbl.DataTable().rows(crRow).nodes().to$().addClass("addnew");	
									}
									else{
										tbl2.DataTable().rows(crRow2).nodes().to$().addClass("addnew");
									}
								}	
								else{
									if ($("input[name='ClassID']:checked").val() == 1){
										tbl.DataTable().rows(crRow).nodes().to$().addClass("editing");
									}
									else{
										tbl2.DataTable().rows(crRow2).nodes().to$().addClass("editing");
									}
								}
							}
						}
					}						

				},
				error: function(err){
					console.log(err);
				}
			});
	    };

	    function getDateTimeFormatString(d){
            year    = d.getFullYear();
            month   = d.getMonth() + 1;
            day     = d.getDate();
            hour    = d.getHours(),
            min     = d.getMinutes(),
            sec     = d.getSeconds(),
            fillMonth = '',
            fillDay   = '',
            fillHour  = '',
            fillMin   = '',
            fillSec   = '';
            
            if (month < 10)
                fillMonth = '0';
            if (day < 10)
                fillDay = '0';
            if (hour < 10)
                fillHour = '0';
            if (min < 10)
                fillMin = '0';
            if (sec < 10)
                fillSec = '0';

            return (year + '-' + fillMonth + month + '-' + fillDay + day + " " + fillHour + hour + ':' + fillMin + min + ':' + fillSec + sec);
        }

	});
</script>
<script src="/assets/vendors/bootstrap-select/dist/js/6bootstrap-select.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/xlsx.full.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/jszip.js"></script>
