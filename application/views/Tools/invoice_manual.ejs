<link href="/assets/vendors/bootstrap-select/dist/css/bootstrap-select.min.css" rel="stylesheet" />
<link href="/assets/vendors/dataTables/extensions/buttons.dataTables.min.css" rel="stylesheet" />
<style>
	@media (max-width: 767px) {
		.f-text-right {
			text-align: right;
		}
	}

	.modal-dialog-mw-py {
		position: fixed;
		top: 20%;
		margin: 0;
		width: 100%;
		padding: 0;
		max-width: 100% !important;
		display: table-cell;
		vertical-align: middle;
	}

	span.col-form-label {
		width: 100%;
		border-bottom: dotted 1px #ccc;
		display: inline-block;
		word-wrap: break-word;
	}

	.modal-dialog-mw-py .modal-body {
		width: 90% !important;
		margin: auto;
	}

	.vertical-alignment-helper {
		display: table;
	}

	.modal-content {
		/* Bootstrap sets the size of the modal in the modal-dialog class, we need to inherit it */
		width: inherit;
		height: inherit;
		/* To center horizontally */
		margin: 0 auto;
	}

	#INV_DRAFT_TOTAL span.col-form-label {
		width: 55%;
		border-bottom: dotted 1px;
		display: inline-block;
		word-wrap: break-word;
	}

	#payer-modal .dataTables_filter {
		padding-left: 10px !important;
	}

	.nav-link.publish-opt:not(.active) {
		text-decoration: underline;
	}

	.scrollable-menu {
		height: auto;
		max-height: 170px;
		overflow-x: hidden;
	}

	.dropdown-menu.dropdown-menu-column,
	.ui-menu.ui-widget.ui-widget-content.ui-autocomplete {
		max-height: 34vh;
		overflow-y: auto;
	}

	.dropdown-menu.open {
		max-height: none !important;
	}
</style>
<div class="row">
	<div class="col-xl-12">
		<div class="ibox collapsible-box">
			<i class="la la-angle-double-up dock-right"></i>
			<div class="ibox-head">
				<div class="ibox-title" id="panel-title">TẠO HOÁ ĐƠN TAY</div>
				<div class="button-bar-group mr-3">
					<button id="addnew" class="btn btn-outline-success btn-sm">
						<span class="btn-icon"><i class="fa fa-plus"></i>Thêm dòng</span>
					</button>
					<button id="remove" class="btn btn-outline-danger btn-sm">
						<span class="btn-icon"><i class="fa fa-trash"></i>Xóa dòng</span>
					</button>
					<button id="pay-confirm" class="btn btn-outline-primary btn-sm" data-loading-text="<i class='la la-spinner spinner'></i>Đang xử lý" title="Xác nhận thanh toán">
						<span class="btn-icon"><i class="fa fa-id-card"></i> Xác nhận thanh toán</span>
					</button>
					<button type="button" id="view-draft-inv" title="Xem HĐ nháp" data-loading-text="<i class='la la-spinner spinner'></i>Đang tạo" class="btn btn-sm btn-outline-secondary mr-1">
						<i class="fa fa-eye"></i>
						Xem HĐ nháp
					</button>
					<input type="file" id="input-file" style="display: none;">
				</div>
			</div>
			<div class="ibox-body pt-2 pb-2 bg-f9 border-e">
				<div class="row my-box pb-1">
					<div class="col-xl-6 col-lg-12 col-md-12 col-sm-12 col-xs-12 mt-3" id="first-col">
						<div class="form-group pb-1">
							<h5 class="text-primary" style="border-bottom: 1px solid #eee">Thông tin chung</h5>
						</div>
						<div class="row form-group">
							<label class="col-sm-3 col-form-label">Tàu/chuyến *</label>
							<div class="col-sm-5 input-group">
								<input class="form-control form-control-sm input-required" id="shipid" placeholder="Tàu/chuyến" type="text" readonly>
								<span class="input-group-addon bg-white btn mobile-hiden text-warning" style="padding: 0 .5rem" title="chọn tàu" data-toggle="modal" data-target="#ship-modal">
									<i class="ti-search"></i>
								</span>
							</div>
							<div class="col-sm-4 input-group input-group-sm pl-0">
								<select id="paymentType" class="selectpicker input-required" data-style="btn-default btn-sm" data-width="100%" title="Chọn loại thanh toán">
									<% if(locals.paymentType && locals.paymentType.length > 0) { %>
									<% locals.paymentType.sort((a, b) => a.PaymentTypeName.toLowerCase() > b.PaymentTypeName.toLowerCase() ? 1 : -1).map(item => { %>
									<option value="<%= item.PaymentTypeID %>"><%= item.PaymentTypeName %></option>
									<% })
									} %>
								</select>
							</div>
						</div>
						<div class="row form-group">
							<label class="col-sm-3 col-form-label" title="Đối tượng thanh toán">Mã KH/ MST</label>
							<div class="col-sm-5 input-group">
								<input class="form-control form-control-sm input-required" id="taxcode" placeholder="Đang nạp ..." type="text" readonly="">
								<span class="input-group-addon bg-white btn mobile-hiden text-warning" style="padding: 0 .5rem" title="Chọn đối tượng thanh toán" data-toggle="modal" data-target="#payer-modal">
									<i class="ti-search"></i>
								</span>
							</div>
							<input class="hiden-input" id="cusID" readonly>
							<div class="col-sm-4 input-group input-group-sm pl-0">
								<select id="paymentMethod" class="selectpicker input-required" data-style="btn-default btn-sm" data-width="100%" title="Chọn phương thức">
								</select>
							</div>
						</div>
						<div class="row form-group">
							<label class="col-sm-3 col-form-label">Tên</label>
							<div class="col-sm-9">
								<span class="col-form-label">
									<span id="p-payername" class="pr-3"></span>
								</span>

							</div>
						</div>
						<div class="row form-group">
							<label class="col-sm-3 col-form-label">Địa chỉ</label>
							<div class="col-sm-9">
								<span class="col-form-label" id="p-payer-addr" style="font-size: 10px!important;">&nbsp;</span>
							</div>
						</div>

						<div class="row form-group pt-2">
							<label class="col-sm-3 col-form-label" title="Đối tượng thanh toán">Số lệnh</label>
							<div class="col-sm-3 pr-0">
								<input class="form-control form-control-sm" id="ref_no" placeholder="Số lệnh" type="text">
							</div>
							<div class="col-sm-6 input-group">
								<span class="input-group-addon bg-white mobile-hiden" style="padding: 0 .5rem" title="Nhập địa chỉ mail của khách hàng khi xuất hoá đơn điện tử">
									<i class="fa fa-envelope"></i>
								</span>
								<input class="form-control form-control-sm" id="mail" placeholder="Địa chỉ e-mail" type="text">
							</div>
						</div>

						<div class="row form-group">
							<label class="col-sm-3 col-form-label" title="Đối tượng thanh toán">Mẫu cước</label>
							<div class="col-sm-3 pr-0">
								<select id="inv-temp-currency" class="selectpicker input-required" data-style="btn-default btn-sm" data-width="100%">
									<option value="VND" selected="">Cước VNĐ</option>
									<option value="USD">Cước USD</option>
								</select>
							</div>
							<div class="col-sm-6">
								<select id="inv-temp" class="selectpicker input-required" data-style="btn-default btn-sm" data-live-search="true" data-width="100%">
									<option value="" selected="">-- Chọn Mẫu cước --</option>
									<option value="*">*</option>
								</select>
							</div>
						</div>
					</div>
					<div class="col-xl-4 col-lg-12 col-md-12 col-sm-12 col-xs-12 mt-3">
						<div class="row" id="INV_DRAFT_TOTAL">
							<div class="col-sm-12">
								<div class="form-group pb-1">
									<h5 class="text-primary" style="border-bottom: 1px solid #eee">Tổng cước phí</h5>
								</div>
								<div class="row form-group">
									<label class="col-sm-4 col-form-label">Thành tiền</label>
									<span class="col-form-label text-right font-bold text-blue" id="Amount">0</span>
									&ensp;
									<div class="currency-unit col-form-label text-right font-bold text-blue">VND</div>
								</div>
								<div class="row form-group hiden-input">
									<label class="col-sm-4 col-form-label">Giảm trừ</label>
									<span class="col-form-label text-right font-bold text-blue" id="DiscountAmount">0</span>
									&ensp;
									<div class="currency-unit col-form-label text-right font-bold text-blue">VND</div>
								</div>
								<div class="row form-group">
									<label class="col-sm-4 col-form-label">Tiền thuế</label>
									<span class="col-form-label text-right font-bold text-blue" id="VatAmount">0</span>
									&ensp;
									<div class="currency-unit col-form-label text-right font-bold text-blue">VND</div>
								</div>
								<div class="row form-group">
									<label class="col-sm-4 col-form-label">Tổng tiền</label>
									<span class="col-form-label text-right font-bold text-danger" id="TotalAmount">0</span>
									&ensp;
									<div class="currency-unit col-form-label text-right font-bold text-danger">VND</div>
								</div>
							</div>
						</div>

						<div class="row mt-3">
							<div class="col-sm-12 publish-type">
								<h5 class="text-primary" style="border-bottom: 1px solid #eee">Loại phát hành</h5>
								<div class="row">
									<div class="col-sm-8 mx-sm-auto">
										<ul class="nav nav-pills nav-pills-rounded nav-pills-air nav-pills-primary nav-justified pb-1">
											<li class="nav-item ml-1">
												<a class="nav-link active publish-opt" href="#tab-12-1" data-value="dft" data-toggle="tab">Phiếu thu</a>
											</li>
											<li class="nav-item ml-1">
												<a class="nav-link publish-opt" href="#tab-12-3" data-value="e-inv" data-toggle="tab">HĐ điện tử</a>
											</li>
										</ul>
									</div>
								</div>
							</div>
						</div>

						<div class="row form-group">
							<div class="col-sm-12">
								<textarea class="form-control form-control-sm" id="remark" placeholder="GHI CHÚ HÓA ĐƠN " style="height: 30px"></textarea>
							</div>
						</div>

					</div>

					<div class="col-xl-2 col-lg-12 col-md-12 col-sm-12 col-xs-12 mt-3">
						<div class="form-group hiden-input" id="inv-type-container">
							<div class="form-group pb-1">
								<h5 class="text-primary" style="border-bottom: 1px solid #eee">Tuỳ chỉnh HĐ</h5>
							</div>
							<div class="form-group mb-0">
								<label class="col-form-label" title="Loại hóa đơn">Loại HĐ</label>
								<select id="inv-type" class="selectpicker" data-style="btn-default btn-sm" data-width="100%">
									<option value="VND" selected=""> Hóa đơn VND </option>
									<option value="USD"> Hóa đơn USD </option>
								</select>
							</div>
							<div class="form-group mb-0">
								<label class="col-form-label" title="Tỉ giá">Tỉ giá</label>
								<input id="ExchangeRate" class="form-control form-control-sm text-right" value="1" placeholder="Tỉ giá" type="text">
							</div>
							<div id="m-inv-date" class="form-group" style="display:block">
								<label class="col-form-label" title="Ngày Hoá đơn">Ngày HĐ</label>
								<input id="inv-date" class="form-control form-control-sm" placeholder="Ngày HĐ" type="text">
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="row ibox-footer border-top-0" style="padding: 10px 12px">
				<div class="col-md-12 col-sm-12 col-xs-12 table-responsive grid-hidden" style="padding: 0 5px">
					<table id="tbl-inv" class="table table-striped display nowrap" cellspacing="0">
						<thead>
							<tr>
								<th col-name="rowguid">rowguid</th>
								<th col-name="STT">STT</th>
								<th col-name="TRFCode">Mã BC</th>
								<th col-name="TRFDesc" max-length=250>Tên biểu cước</th>
								<th col-name="TRFDescMore" max-length=100>Ghi chú hóa đơn</th>
								<th col-name="ItemID" class="autocomplete" default-value="*">Hàng hóa</th>
								<th col-name="UnitID" max-length=3>ĐVT</th>
								<th col-name="ClassID" class="autocomplete" default-value="*">Hướng</th>
								<th col-name="IsLocalForeign" default-value="*">Nội/Ngoại (L/F)</th>
								<th col-name="Quantity" class="data-type-numeric" float-nums=<% locals.roundNumQty_Unit || 0; %>>Số Lượng</th>
								<th col-name="PriceIncludeVat" class="data-type-numeric">Đơn giá gồm thuế</th>
								<th col-name="UnitPrice" class="data-type-numeric">Đơn giá chưa thuế</th>
								<th col-name="Amount" class="data-type-numeric">Thành tiền</th>
								<th col-name="VatRate" class="data-type-numeric">Thuế (%)</th>
								<th col-name="VatAmount" class="data-type-numeric">Tiền thuế</th>
								<th col-name="TotalAmount" class="data-type-numeric">Tổng tiền</th>
							</tr>
						</thead>

						<tbody>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<!--select ship-->
<div class="modal fade" id="ship-modal" tabindex="-1" role="dialog" aria-labelledby="groups-modalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-mw" role="document" style="min-width: 960px">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="groups-modalLabel">Chọn tàu</h5>
			</div>
			<div class="modal-body" style="padding: 10px 0">
				<div class="row col-xl-12">
					<div class="col-lg-4 col-md-4 col-sm-12 col-xs-12 mt-1">
						<div class="form-group">
							<label class="radio radio-outline-primary" style="padding-right: 15px!important;">
								<input name="shipArrStatus" type="radio" value="1" checked>
								<span class="input-span"></span>
								Đến cảng
							</label>
							<label class="radio radio-outline-primary">
								<input name="shipArrStatus" value="2" type="radio">
								<span class="input-span"></span>
								Rời Cảng
							</label>
						</div>
					</div>
					<div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 pr-0">
						<div class="row form-group">
							<div class="col-sm-12 pr-0">
								<div class="input-group">
									<select id="cb-searh-year" class="selectpicker" data-width="30%" data-style="btn-default btn-sm">
									</select>
									<input class="form-control form-control-sm mr-2 ml-2" id="search-ship-name" type="text" placeholder="Nhập tên tàu">
									<span id="btn-search-ship" class="input-group-addon bg-white btn mobile-hiden text-warning" style="padding: 0 .5rem" title="Tìm kiếm">
										<i class="ti-search"></i>
									</span>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="table-responsive">
					<table id="search-ship" class="table table-striped display nowrap table-popup single-row-select" cellspacing="0" style="width: 99.8%">
						<thead>
							<tr>
								<th>Mã Tàu</th>
								<th style="width: 20px;">STT</th>
								<th>Tên Tàu</th>
								<th>Chuyến Nhập</th>
								<th>Chuyến Xuất</th>
								<th>ETB</th>
								<th>VoyageKey</th>
								<th>ATB</th>
								<th>LaneID</th>
							</tr>
						</thead>
						<tbody>
						</tbody>
					</table>
				</div>
			</div>
			<div class="modal-footer">
				<div style="display: flex; flex: 1; justify-content: flex-start; align-items: center;">
					<button type="button" id="reload-ship" class="btn btn-sm btn-warning">
						<i class="fa fa-refresh"></i>
						Tải lại
					</button>
				</div>
				<button type="button" id="select-ship" class="btn btn-sm btn-outline-primary" data-dismiss="modal">
					<i class="fa fa-check"></i>
					Chọn
				</button>
				<button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal">
					<i class="fa fa-close"></i>
					Đóng
				</button>
			</div>
		</div>
	</div>
</div>

<!--payer modal-->
<div class="modal fade" id="payer-modal" tabindex="-1" role="dialog" aria-labelledby="groups-modalLabel" aria-hidden="true" style="z-index: 1055">
	<div class="modal-dialog modal-dialog-mw" role="document" style="min-width: 960px">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="groups-modalLabel">Chọn đối tượng thanh toán</h5>
			</div>
			<div class="modal-body" style="padding: 10px 0">
				<div class="table-responsive">
					<table id="search-payer" class="table table-striped display nowrap table-popup single-row-select" cellspacing="0" style="width: 100%">
						<thead>
							<tr>
								<th>STT</th>
								<th>Mã ĐT</th>
								<th>MST</th>
								<th>Tên</th>
								<th>Địa chỉ</th>
								<th>HTTT</th>
							</tr>
						</thead>
						<tbody>

						</tbody>
					</table>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" id="select-payer" class="btn btn-sm btn-outline-primary" data-dismiss="modal">
					<i class="fa fa-check"></i>
					Chọn
				</button>
				<button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal">
					<i class="fa fa-close"></i>
					Đóng
				</button>

			</div>
		</div>
	</div>
</div>

<!-- view-inv-draft modal -->
<div class="modal fade" id="view-inv-draft-modal" tabindex="-1" role="dialog" aria-labelledby="groups-modalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document" style="display: flex;justify-content: center;align-items: center;">
		<div class="modal-content" style="border-radius: 10px!important;">
			<div class="modal-body">
				<div id="view-inv-draft-content"></div>
			</div>
			<div class="modal-footer p-2">
				<button type="button" id="print-inv-draft" data-loading-text="<i class='la la-spinner spinner'></i>Đang in" class="btn btn-sm btn-outline-primary">
					<i class="fa fa-print"></i>
					In
				</button>
				<button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal">
					<i class="fa fa-close"></i>
					Đóng lại
				</button>
			</div>
		</div>
	</div>
</div>

<script src="/assets/js/jsprint.js"></script>
<script type="text/javascript">
	$(document).ready(function() {
		var _colPayer = ["STT", "CusID", "TaxCode", "CusName", "Address", "PaymentTypeID"],
			_colsPayment = ["rowguid", "STT", "TRFCode", "TRFDesc", "TRFDescMore", "ItemID", "UnitID", "ClassID", "IsLocalForeign", "Quantity", "PriceIncludeVat", "UnitPrice", "Amount", "VatRate", "VatAmount", "TotalAmount"];

		var _results = [],
			_selectVoyageKey = '',
			_shipData = [],
			tblInv = $("#tbl-inv"),
			_listCalc = [],
			_listTariff = [],
			_useTplts = [],
			payers = [];

		var _units = <%- JSON.stringify(locals.units || []) %>;
		var _itemList = <%- JSON.stringify(locals.items || []) %>;
		var invTemps = <%- JSON.stringify(locals.invTemps || []) %>;
		var _roundNums = <%- JSON.stringify(locals.roundNums || {}); %>; //them moi lam tron so
		var _roundNumQty_Unit = <%= locals.roundNumQty_Unit || 0; %>; //lam tron so luong+don gia theo yeu cau KT
		var _classCode = <%- JSON.stringify(locals.classCode || []) %>;
		var _paymentMethods = <%- JSON.stringify(locals.paymentTypeAndMethod || []) %>;

		if (_itemList.filter(p => p.ItemID == '*').length == 0) {
			_itemList.splice(0, 0, {
				CargoTypeID: '*',
				ItemID: '*',
				ItemName: '*'
			});
		}

		if (_classCode.filter(p => p.ClassID == '*').length == 0) {
			_classCode.push({
				ClassID: '*',
				ClassName: '*'
			});
		}

		var _localForeign = [{
				"Code": "*",
				"Name": "*"
			},
			{
				"Code": "L",
				"Name": "Nội"
			},
			{
				"Code": "F",
				"Name": "Ngoại"
			}
		];

		//------define table
		$('#search-ship').DataTable({
			scrollY: '35vh',
			paging: false,
			order: [
				[1, 'asc']
			],
			columnDefs: [{
					className: "input-hidden",
					targets: [0, 6, 8]
				},
				{
					className: "text-center",
					targets: [1]
				}
			],
			buttons: [],
			info: false,
			searching: false
		});

		$('#search-payer').DataTable({
			paging: true,
			scroller: {
				displayBuffer: 12,
				boundaryScale: 0.5
			},
			columnDefs: [{
					type: "num",
					className: 'text-center',
					targets: [0]
				},
				{
					render: function(data, type, row, meta) {
						return "<div class='wrap-text width-250'>" + data + "</div>";
					},
					targets: _colPayer.getIndexs(["CusName", "Address"])
				}
			],
			buttons: [],
			infor: false,
			scrollY: '45vh'
		});

		tblInv.DataTable({
			info: false,
			paging: false,
			searching: false,
			buttons: [{
				text: '<i class="fa fa-upload"></i> Nạp file Excel',
				titleAttr: 'Nạp file Excel',
				action: function() {
					$("input#input-file").trigger("click");
				}
			}, {
				text: '<i class="fa fa-download"></i> Tải tệp mẫu',
				action: function(e, dt, node, config) {
					location.href = "<?= site_url(md5('Tools') . '/' . md5('downloadManualInvTemp')); ?>";
				}
			}],
			scrollY: '30vh',
			columnDefs: [{
					targets: _colsPayment.indexOf("rowguid"),
					className: "hiden-input"
				},
				{
					targets: _colsPayment.getIndexs(["STT"]),
					className: "text-center"
				},
				{
					targets: _colsPayment.getIndexs(["TRFCode"]),
					className: "input-required"
				},
				{
					targets: _colsPayment.getIndexs(["Quantity"]),
					className: "text-right",
					render: function(data, type, full, meta) {
						return $.fn.dataTable.render.number(',', '.', _roundNumQty_Unit).display(data); //lam tron so luong+don gia theo yeu cau KT
					}
				},
				{
					targets: _colsPayment.getIndexs(["UnitPrice"]),
					className: "text-right",
					render: function(data, type, full, meta) {
						return $.fn.dataTable.render.number(',', '.', 4).display(data); //lam tron so luong+don gia theo yeu cau KT
					}
				},
				{
					targets: _colsPayment.getIndexs(["PriceIncludeVat", "Amount", "VatRate", "VatAmount", "TotalAmount"]),
					className: "text-right",
					render: function(data, type, full, meta) {
						return $.fn.dataTable.render.number(',', '.', _roundNums[$('#inv-temp-currency').val()]).display(data); //them moi lam tron so
					}
				},
				{
					className: "input-required",
					render: function(data, type, full, meta) {
						return "<div class='wrap-text width-300'>" + data + "</div>";
					},
					width: 200,
					targets: _colsPayment.getIndexs(["TRFDesc", "TRFDescMore"])
				},
				{
					render: function(data, type, full, meta) {
						var temp = Array.isArray(data) ? data[0] : data;
						var temp1 = _units.filter(p => String(p.UnitID).trim().toUpperCase() === String(temp).trim().toUpperCase());
						return temp1.length > 0 ? temp1[0].UnitName : '';
					},
					className: "text-center show-dropdown autocomplete input-required",
					list: _units.map((itm) => {
						return {
							value: itm.UnitID,
							label: itm.UnitName
						}
					}),
					targets: _colsPayment.indexOf('UnitID')
				},
				{
					render: function(data, type, full, meta) {
						var temp = Array.isArray(data) ? data[0] : data;
						var temp1 = _localForeign.filter(p => String(p.Code).trim().toUpperCase() === String(temp).trim().toUpperCase());
						return temp1.length > 0 ? temp1[0].Name : '';
					},
					className: "text-center show-dropdown autocomplete input-required",
					list: _localForeign.map((itm) => {
						return {
							value: itm.Code,
							label: itm.Name
						}
					}),
					targets: _colsPayment.indexOf('IsLocalForeign')
				},
				{
					render: function(data, type, full, meta) {
						var temp = Array.isArray(data) ? data[0] : data;
						var temp1 = _classCode.filter(p => String(p.ClassID).trim().toUpperCase() === String(temp).trim().toUpperCase());
						return temp1.length > 0 ? temp1[0].ClassName : '';
					},
					list: _classCode.map((itm) => {
						return {
							value: itm.ClassID,
							label: itm.ClassName
						}
					}),
					className: "text-center show-dropdown autocomplete input-required",
					targets: _colsPayment.getIndexs(["ClassID"])
				},
				{
					render: function(data, type, full, meta) {
						var temp = Array.isArray(data) ? data[0] : data;
						var temp1 = _itemList.filter(p => String(p.ItemID).trim().toUpperCase() === String(temp).trim().toUpperCase());
						return temp1.length > 0 ? temp1[0].ItemName : '';
					},
					className: "text-center show-dropdown autocomplete input-required",
					list: _itemList.map((itm) => {
						return {
							value: itm.ItemID,
							label: itm.ItemName
						}
					}),
					targets: _colsPayment.getIndexs(["ItemID"])
				}
			],
			order: [],
			keys: true,
			autoFill: {
				focus: 'focus',
				columns: _colsPayment.getIndexs(["TRFDesc", "TRFDescMore", "UnitID", "ClassID", "ItemID", "IsLocalForeign", "Quantity", "PriceIncludeVat", "UnitPrice", "VatRate"])
			},
			select: true,
			rowReorder: false
		});

		//------define table

		$("#inv-date").datetimepicker({
			controlType: 'select',
			oneLine: true,
			dateFormat: 'dd/mm/yy',
			timeFormat: 'HH:mm:ss',
			timeInput: true
		});

		// $("#inv-date").val(moment().format('DD/MM/YYYY HH:mm:ss'))

		$('select.selectpicker.input-required').on('change', function(e) {
			if (e.target.value) {
				$(e.target).removeClass('error').selectpicker('refresh');
			}
		})

		//------SEARCH SHIP
		autoLoadYearCombo('cb-searh-year');
		search_ship();
		$('#btn-search-ship').on('click', function() {
			search_ship();
		});

		$(document).on('click', '#search-ship tbody tr', function() {
			$('.m-row-selected').removeClass('m-row-selected');
			$(this).addClass('m-row-selected');
		});

		$('#search-ship-name').on('keypress', function(e) {
			if (e.which == 13) {
				search_ship();
			}
		});
		$('#select-ship').on('click', function() {
			var r = $('#search-ship tbody').find('tr.m-row-selected').first();
			$('#shipid').val($(r).find('td:eq(2)').text() + "/" + $(r).find('td:eq(3)').text() + "/" + $(r).find('td:eq(4)').text());
			$('#shipid').removeClass('error');

			_selectVoyageKey = $(r).find('td:eq(6)').text();
		});
		$('#unselect-ship').on('click', function() {
			$('#shipid').val('');
		});
		$('#search-ship').on('dblclick', 'tbody tr td', function() {
			var r = $(this).parent();
			$('#shipid').val($(r).find('td:eq(2)').text() + "/" + $(r).find('td:eq(3)').text() + "/" + $(r).find('td:eq(4)').text());
			$('#shipid').removeClass('error');

			_selectVoyageKey = $(r).find('td:eq(6)').text();

			$('#ship-modal').modal("toggle");
		});

		$('#reload-ship').on("click", function() {
			$('#search-ship-name').val("");
			search_ship();
		})

		$("#remove-ship-selected").on("click", function() {
			_selectVoyageKey = "";
			$("#shipid").val("");
		});
		//------END SEARCH SHIP

		load_payer();
		// loadInvTemp();

		//------SEARCH PAYER

		$(document).on('click', '#search-payer tbody tr', function() {
			$('.m-row-selected').removeClass('m-row-selected');
			$(this).addClass('m-row-selected');
		});

		$('#select-payer').on('click', function() {
			var r = $('#search-payer tbody').find('tr.m-row-selected').first();

			$('#taxcode').val($(r).find('td:eq(' + _colPayer.indexOf("TaxCode") + ')').text());
			$('#cusID').val($(r).find('td:eq(' + _colPayer.indexOf("CusID") + ')').text());
			fillPayer();

			$('#taxcode').removeClass("error");
			$('#taxcode').trigger("change");
		});

		$('#search-payer').on('dblclick', 'tbody tr td', function(e) {
			var r = $(this).parent();

			$('#taxcode').val($(r).find('td:eq(' + _colPayer.indexOf("TaxCode") + ')').text());
			$('#cusID').val($(r).find('td:eq(' + _colPayer.indexOf("CusID") + ')').text());

			fillPayer();

			$('#payer-modal').modal("toggle");
			$('#taxcode').removeClass("error");
			$('#taxcode').trigger("change");
		});

		$('#taxcode').on('change', function(e) {
			var taxcode = $(e.target).val();
			if (!taxcode) {
				clearPayer();
				return;
			}

			var cusID = "";
			var ccc = $("#cusID").val();

			if (payers.length == 0 && !ccc) {
				findPayer(taxcode);
				return;
			}

			var tempSearchCus = payers.filter(p => p.TaxCode.toString().includes(taxcode));
			if (ccc) {
				cusID = ccc;
			} else {
				if (tempSearchCus.length == 0) {
					$(".toast").remove();
					toastr.options.timeOut = "10000";
					toastr["warning"]("Đối tượng thanh toán này không tồn tại trong hệ thống! <br/> Vui lòng Thêm mới/ Chọn đối tượng khác!");
					toastr.options.timeOut = "5000";
					return;
				} else if (tempSearchCus.length > 1) {
					clearPayer();
					$('#search-payer').DataTable().search(taxcode).draw(false)
					$('#payer-modal').modal("show");
					return;
				}
				cusID = tempSearchCus[0].CusID;
			}

			$("#cusID").val(cusID);
			var checkPayerInput = fillPayer();

			if (!checkPayerInput) {
				clearPayer();

				$(".toast").remove();
				toastr.options.timeOut = "10000";
				toastr["warning"]("Đối tượng thanh toán này không tồn tại trong hệ thống! <br/> Vui lòng Thêm mới/ Chọn đối tượng khác!");
				toastr.options.timeOut = "5000";
				return;
			}
		})
		//------END SEARCH PAYER

		///////// ON PAYMENT MODAL
		$('#ExchangeRate')
			.on('keydown', function(e) {
				if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
					((e.keyCode == 65 || e.keyCode == 86 || e.keyCode == 67) && (e.ctrlKey === true || e.metaKey === true)) ||
					(e.keyCode >= 35 && e.keyCode <= 40) || e.keyCode >= 112) {
					return;
				}
				// Ensure that it is a number and stop the keypress
				if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
					e.preventDefault();
				}
			})
			.on("change", function(e) {
				var tempExc = $(e.target).val();
				if (isNaN(parseFloat(tempExc)) || tempExc == 0) {
					$(e.target).val(1);
				} else {
					var n = $.formatNumber(tempExc, {
						format: "#,###.##",
						locale: "us"
					});
					if (n.substring(0, 1) == '.') {
						n = "0" + n;
					}
					$(e.target).val(n);
				}
				calcTotal();
			});

		///////// ON PAYMEMT MODAL

		$('#addnew').on('click', function() {
			if (!$('#inv-temp').val()) {
				toastr.error('Chưa chọn mẫu cước');
				return;
			}

			$.confirm({
				columnClass: 'col-md-3 col-md-offset-3',
				titleClass: 'font-size-17',
				title: 'Thêm dòng mới',
				content: '<div class="input-group-icon input-group-icon-left">' +
					'<span class="input-icon input-icon-left"><i class="fa fa-plus" style="color: green"></i></span>' +
					'<input autofocus class="form-control form-control-sm" id="num-row" type="number" placeholder="Nhập số dòng" value="1">' +
					'</div>',
				buttons: {
					ok: {
						text: 'Xác nhận',
						btnClass: 'btn-sm btn-primary btn-confirm',
						keys: ['Enter'],
						action: function() {
							var input = this.$content.find('input#num-row');
							var errorText = this.$content.find('.text-danger');
							if (!input.val().trim()) {
								$.alert({
									title: "Thông báo",
									content: "Vui lòng nhập số dòng!.",
									type: 'red'
								});
								return false;
							} else {
								tblInv.newRows(input.val());
							}
						}
					},
					later: {
						text: 'Hủy',
						btnClass: 'btn-sm',
						keys: ['ESC']
					}
				}
			});
		});

		//------USING MANUAL INVOICE

		$("a.publish-opt").on("click", function(e) {
			if ($(e.target).attr('data-value') == $('a.publish-opt.active').attr('data-value')) {
				return;
			}

			if ($(e.target).attr('data-value') == 'dft') {
				$("#inv-type-container").addClass("hiden-input");
				$("#pay-confirm").prop("disabled", false);
				return;
			}

			$("#inv-type-container").removeClass("hiden-input");
			$("#pay-confirm").prop("disabled", false);
		});
		//------USING MANUAL INVOICE

		//------EVENTS
		$('#ship-modal, #payer-modal').on('shown.bs.modal', function(e) {
			$($.fn.dataTable.tables(true)).DataTable()
				.columns
				.adjust();
		});

		$("#inv-temp-currency").on("change", function() {
			tblInv.dataTable().fnClearTable();
			_useTplts = _listTariff = [];
			loadInvTemp();
		});

		$("#inv-temp").on("change", function(e) {
			if (!$('#inv-temp').val()) {
				toastr["error"]("Chọn mẫu cước!");
				return;
			}
			loadTariffSTD($('#inv-temp').val());
		});

		$("#inv-type").on("change", function(e) {
			$('.currency-unit').text($(this).val());
			calcTotal();
		});

		$('#paymentType').on('change', function(e) {
			var pubType = $('a.publish-opt.active').attr('data-value');
			var payType = $(e.target).val();
			$('#ref_no').val('').prop('readonly', payType == 'CRE');

			//xu ly chon hinh thuc thanh toan
			$("#paymentMethod").find('option').remove();
			let methods = _paymentMethods.filter(p => p.PaymentTypeID == payType);
			methods.map((p, i) => {
				$("#paymentMethod").append(`<option value="${p.PaymentMethod}"  ${i == 0 && methods.length == 1 ? "selected" : ""}>${p.PaymentMethod}</option>`);
			});
			$("#paymentMethod").selectpicker('refresh');
		});

		$("#remove").on("click", function() {
			if (tblInv.DataTable().rows().count() == 0) {
				return;
			}

			if (tblInv.DataTable().rows('.selected').count() == 0) {
				toastr["error"]("Chọn ít nhất 1 dòng dữ liệu để xoá!");
				return;
			}

			$.confirm({
				title: 'Thông báo!',
				type: 'orange',
				icon: 'fa fa-warning',
				content: 'Các dòng dữ liệu được chọn sẽ được xóa?',
				buttons: {
					ok: {
						text: 'Chấp nhận',
						btnClass: 'btn-warning',
						keys: ['Enter'],
						action: function() {
							//remove all row to recalculate
							tblInv.DataTable().rows('.selected').remove().draw();
							tblInv.updateSTT(_colsPayment.indexOf("STT"));
						}
					},
					cancel: {
						text: 'Hủy bỏ',
						btnClass: 'btn-default',
						keys: ['ESC']
					}
				}
			});
		});

		tblInv.DataTable().on('autoFill', function(e, datatable, cells) {
			var startRowIndex = cells[0][0].index.row;

			var fillQty = cells[0].filter(p => p.index.column == _colsPayment.indexOf("Quantity"));
			var notFirstRow = cells.filter(p => cells.indexOf(p) != 0);
			if (fillQty && fillQty.length > 0) {
				$.each(notFirstRow, function(idx, item) {
					var qtyCell = tblInv.DataTable().cell(item[0].index.row, _colsPayment.indexOf("Quantity")).nodes().to$();
					onChangeQty(qtyCell);
				});
			}

			var fillpriceIncludeVat = cells[0].filter(p => p.index.column == _colsPayment.indexOf("PriceIncludeVat"));
			if (fillpriceIncludeVat && fillpriceIncludeVat.length > 0) {
				$.each(notFirstRow, function(idx, item) {
					var szstandardRate = tblInv.DataTable().cell(item[0].index.row, _colsPayment.indexOf("PriceIncludeVat")).nodes().to$();
					onChangePriceIncludeVat(szstandardRate);
				});
			}

			var fillunitPrice = cells[0].filter(p => p.index.column == _colsPayment.indexOf("UnitPrice"));
			if (fillunitPrice && fillunitPrice.length > 0) {
				$.each(notFirstRow, function(idx, item) {
					var stdCell = tblInv.DataTable().cell(item[0].index.row, _colsPayment.indexOf("UnitPrice")).nodes().to$();
					onChangeUnitPrice(stdCell);
				});
			}

			var fillvatRate = cells[0].filter(p => p.index.column == _colsPayment.indexOf("VatRate"));
			if (fillunitPrice && fillunitPrice.length > 0) {
				$.each(notFirstRow, function(idx, item) {
					var vatRateCell = tblInv.DataTable().cell(item[0].index.row, _colsPayment.indexOf("VatRate")).nodes().to$();
					onChangeVatRate(vatRateCell);
				});
			}
		});

		var unitRateChanged = false;
		tblInv.on('change', 'td', function(e) {
			var colidx = $(this).index();

			if (colidx == _colsPayment.indexOf("PriceIncludeVat")) {
				onChangePriceIncludeVat($(e.target));
			}

			if (colidx == _colsPayment.indexOf("UnitPrice")) {
				onChangeUnitPrice($(e.target));
			}

			if (colidx == _colsPayment.indexOf("Quantity")) {
				onChangeQty($(e.target));
			}

			if (colidx == _colsPayment.indexOf("VatRate")) {
				onChangeVatRate($(e.target));
			}

			if (colidx == _colsPayment.indexOf("Amount") || colidx == _colsPayment.indexOf("TotalAmount")) {
				calcTotal();
			}
		})

		$('#pay-confirm').on('click', function() {
			if (!$("#cusID").val()) {
				toastr["error"]("Chọn đối tượng thanh toán");
				$("#taxcode").addClass("error");
				return;
			}

			if (tblInv.DataTable().rows().count() == 0) {
				$('.toast').remove();
				toastr['warning']('Chưa có chi tiết cước!');
				return;
			}

			if (tblInv.DataTable().column(_colsPayment.indexOf("TotalAmount"))
				.data().toArray()
				.filter(p => parseFloat(p) == 0).length > 0) {
				$('.toast').remove();
				toastr['warning']('Chưa nhập đủ chi tiết cước!');
				return;
			}

			var tdrequired = tblInv.find('tbody td.input-required');
			if (tdrequired.has_required()) {
				$('.toast').remove();
				toastr['error']('Vui lòng nhập đầy đủ thông tin!');
				return;
			}

			if (!$('#paymentType').val()) {
				toastr.error('Chưa chọn loại thanh toán!');
				$("#paymentType").addClass("error").selectpicker('refresh');
				return;
			}

			if (!$('#paymentMethod').val()) {
				toastr.error('Chưa chọn hình thức thanh !');
				$("#paymentMethod").addClass("error").selectpicker('refresh');
				return;
			}

			if ($('#paymentType').val() == 'CRE') { // khong cho xuat hd giay thu sau 
				if (!$('#inv-date').val()) {
					toastr.error('Chưa chọn ngày phát hành!');
					$("#inv-date").addClass("error");
					return;
				}
			}

			$.confirm({
				title: 'Thông báo!',
				type: 'orange',
				icon: 'fa fa-warning',
				content: 'Xác nhận phát hành [' + $('a.publish-opt.active').text().toUpperCase() + ']',
				buttons: {
					ok: {
						text: 'Tiếp tục',
						btnClass: 'btn-warning',
						keys: ['Enter'],
						action: function() {
							$('#pay-confirm').button("loading");
							$('.ibox.collapsible-box').blockUI();
							if ($('a.publish-opt.active').attr('data-value') == "e-inv") {
								publishInv();
							} else {
								saveData();
							}
						}
					},
					cancel: {
						text: 'Hủy bỏ',
						btnClass: 'btn-default',
						keys: ['ESC']
					}
				}
			});
		});

		$("#view-draft-inv").on("click", function() {
			if (!$("#cusID").val()) {
				toastr["error"]("Chọn đối tượng thanh toán");
				$("#taxcode").addClass("error");
				return;
			}

			if (tblInv.DataTable().rows().count() == 0) {
				$('.toast').remove();
				toastr['warning']('Chưa có chi tiết cước!');
				return;
			}

			if (tblInv.DataTable().column(_colsPayment.indexOf("TotalAmount"))
				.data().toArray()
				.filter(p => parseFloat(p) == 0).length > 0) {
				$('.toast').remove();
				toastr['warning']('Chưa nhập đủ chi tiết cước!');
				return;
			}

			var tdrequired = tblInv.find('tbody td.input-required');
			if (tdrequired.has_required()) {
				$('.toast').remove();
				toastr['error']('Vui lòng nhập đầy đủ thông tin!');
				return;
			}

			if (!$('#paymentType').val()) {
				toastr.error('Chưa chọn loại thanh toán!');
				$("#paymentType").addClass("error").selectpicker('refresh');
				return;
			}

			if (!$('#paymentMethod').val()) {
				toastr.error('Chưa chọn hình thức thanh !');
				$("#paymentMethod").addClass("error").selectpicker('refresh');
				return;
			}

			publishInv(true);
		});

		$('#print-inv-draft').on('click', function() {
			$('#view-inv-draft-content').print();
		})

		var oFileIn;
		$("input#input-file").on('click', function() {
			if (!$('#inv-temp').val()) {
				toastr["error"]("Chọn mẫu cước!");
				return;
			}

			oFileIn = document.getElementById('input-file');
			if (oFileIn === null) return;
			if (oFileIn.addEventListener) {
				oFileIn.addEventListener('change', filePicked, false);
				$(this).val('');
			}
		});
		//------EVENTS

		//------FUNCTIONS
		function onChangeQty(cell) {
			var dtTbl = tblInv.DataTable();
			var rowIdx = dtTbl.cell(cell).index().row;
			var qty = dtTbl.cell(rowIdx, _colsPayment.indexOf("Quantity")).data();
			var vat_rate = dtTbl.cell(rowIdx, _colsPayment.indexOf("VatRate")).data() || 0;
			var PriceIncludeVat = dtTbl.cell(rowIdx, _colsPayment.indexOf("PriceIncludeVat")).data();
			var roundNum = _roundNums[$('#inv-type').val()];

			//thành tiền
			var unitRate = parseFloat(PriceIncludeVat) / ((parseFloat(vat_rate) / 100) + 1);
			var amt = parseFloat(qty * unitRate);
			var last_amt = parseFloat(amt.toFixed(roundNum));

			if (!unitRateChanged) {
				var rowguid = dtTbl.cell(rowIdx, _colsPayment.indexOf("rowguid")).data();
				var tempTRF = _listTariff.filter(p => p.rowguid == rowguid)[0];

				var colForUnitPrice = "Price";
				//giá theo biểu cước
				var tempPrice = tempTRF ? parseFloat(tempTRF[colForUnitPrice]) : undefined;

				if (isNaN(tempPrice)) {
					dtTbl.cell(rowIdx, _colsPayment.indexOf("Amount")).data(0);
					dtTbl.cell(rowIdx, _colsPayment.indexOf("VatAmount")).data(0);
					dtTbl.cell(rowIdx, _colsPayment.indexOf("TotalAmount")).data(0);

					calcTotal();
					return;
				}

				//đơn giá có thuế
				var unitPriceIncludeVat = tempPrice / ((parseFloat(tempTRF['VatAmount']) / 100) + 1);

				//thành tiền
				amt = parseFloat(qty) * (tempTRF['IncludeVAT'] == "1" ? unitPriceIncludeVat : tempPrice);
				last_amt = parseFloat(amt.toFixed(roundNum));
			}

			//tiền thuế
			var vat_amt = (parseFloat(vat_rate) / 100) * amt;
			var last_vat_amt = parseFloat(vat_amt.toFixed(roundNum));

			//tổng tiền
			var tamount = last_amt + last_vat_amt;

			dtTbl.cell(rowIdx, _colsPayment.indexOf("Amount")).data(last_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("VatAmount")).data(last_vat_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("TotalAmount")).data(tamount);

			calcTotal();
		}

		function onChangeVatRate(cell) {
			var dtTbl = tblInv.DataTable();
			var rowIdx = dtTbl.cell(cell).index().row;
			var unitRate = dtTbl.cell(rowIdx, _colsPayment.indexOf("UnitPrice")).data();
			var qty = dtTbl.cell(rowIdx, _colsPayment.indexOf("Quantity")).data();
			var amt = dtTbl.cell(rowIdx, _colsPayment.indexOf("Amount")).data();
			var vat_rate = dtTbl.cell(rowIdx, _colsPayment.indexOf("VatRate")).data() || 0;
			var roundNum = _roundNums[$('#inv-type').val()];

			//tiền thuế
			var vat_amt = (parseFloat(vat_rate) / 100) * parseFloat(amt);
			var last_vat_amt = parseFloat(vat_amt.toFixed(roundNum));

			//tổng tiền
			var tamount = parseFloat(amt) + last_vat_amt;

			dtTbl.cell(rowIdx, _colsPayment.indexOf("VatAmount")).data(last_vat_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("TotalAmount")).data(tamount);

			calcTotal();
		}

		function onChangeUnitPrice(cell) {
			var dtTbl = tblInv.DataTable();
			var rowIdx = dtTbl.cell(cell).index().row;
			var unitRate = dtTbl.cell(rowIdx, _colsPayment.indexOf("UnitPrice")).data();
			var qty = dtTbl.cell(rowIdx, _colsPayment.indexOf("Quantity")).data();
			var vat_rate = dtTbl.cell(rowIdx, _colsPayment.indexOf("VatRate")).data() || 0;
			var roundNum = _roundNums[$('#inv-type').val()];

			//thành tiền gồm thuế
			var amtIncludeVat = parseFloat(unitRate) * ((parseFloat(vat_rate) / 100) + 1);
			var last_amtIncludeVat = amtIncludeVat;

			//thành tiền
			var amt = parseFloat(qty) * parseFloat(unitRate);
			var last_amt = parseFloat(amt.toFixed(roundNum));

			//tiền thuế
			var vat_amt = (parseFloat(vat_rate) / 100) * amt;
			var last_vat_amt = parseFloat(vat_amt.toFixed(roundNum));

			//tổng tiền
			var tamount = last_amt + last_vat_amt;

			dtTbl.cell(rowIdx, _colsPayment.indexOf("PriceIncludeVat")).data(last_amtIncludeVat);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("Amount")).data(last_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("VatAmount")).data(last_vat_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("TotalAmount")).data(tamount);

			//user thay đổi đơn giá trên lưới -> đanh dấu "Thany đổi đơn gía" = true
			unitRateChanged = true;
			calcTotal();
		}

		function onChangePriceIncludeVat(cell) {
			var dtTbl = tblInv.DataTable();
			var rowIdx = dtTbl.cell(cell).index().row;
			var PriceIncludeVat = dtTbl.cell(rowIdx, _colsPayment.indexOf("PriceIncludeVat")).data();
			var qty = dtTbl.cell(rowIdx, _colsPayment.indexOf("Quantity")).data();
			var vat_rate = dtTbl.cell(rowIdx, _colsPayment.indexOf("VatRate")).data() || 0;
			var roundNum = _roundNums[$('#inv-type').val()];

			//thành tiền chưa thuế
			var amtExcludeVat = parseFloat(PriceIncludeVat) / ((parseFloat(vat_rate) / 100) + 1);
			var last_amtExcludeVat = amtExcludeVat;

			//thành tiền
			var amt = parseFloat(qty) * (parseFloat(PriceIncludeVat) / ((parseFloat(vat_rate) / 100) + 1));
			var last_amt = parseFloat(amt.toFixed(roundNum));

			//tiền thuế
			var vat_amt = (parseFloat(vat_rate) / 100) * amt;
			var last_vat_amt = parseFloat(vat_amt.toFixed(roundNum));

			//tổng tiền
			var tamount = last_amt + last_vat_amt;

			dtTbl.cell(rowIdx, _colsPayment.indexOf("UnitPrice")).data(last_amtExcludeVat);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("Amount")).data(last_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("VatAmount")).data(last_vat_amt);
			dtTbl.cell(rowIdx, _colsPayment.indexOf("TotalAmount")).data(tamount);

			//user thay đổi đơn giá trên lưới -> đanh dấu "Thany đổi đơn gía" = true
			unitRateChanged = true;
			calcTotal();
		}

		function calcTotal() {
			var formatNum = '#,###'; //them moi lam tron so
			var roundNum = _roundNums[$('#inv-type').val()];
			if (roundNum > 0) {
				formatNum += "." + ("0000000000".slice(-roundNum));
			}

			var exchange_rate = parseFloat($('#ExchangeRate').val().replace(',', ''));
			//ko quy doi khi 2 loai hoa don giong nhau
			if ($('#inv-temp-currency').val() == $('#inv-type').val()) {
				exchange_rate = 1;
			}

			var amount = tblInv.DataTable()
				.column(_colsPayment.indexOf("Amount"), {
					page: 'current'
				})
				.data()
				.reduce(function(a, b) {
					return parseFloat(a) + parseFloat(b);
				}, 0);
			var totalVatAmount = tblInv.DataTable()
				.column(_colsPayment.indexOf("VatAmount"), {
					page: 'current'
				})
				.data()
				.reduce(function(a, b) {
					return parseFloat(a || 0) + parseFloat(b || 0);
				}, 0);

			amount = parseFloat((amount * exchange_rate).toFixed(roundNum));
			totalVatAmount = parseFloat((totalVatAmount * exchange_rate).toFixed(roundNum));
			totalAmount = amount + totalVatAmount;

			$('#Amount').text(amount == 0 ? '0' : $.formatNumber(amount, {
				format: formatNum,
				locale: "us"
			}));
			$('#VatAmount').text(totalVatAmount == 0 ? '0' : $.formatNumber(totalVatAmount, {
				format: formatNum,
				locale: "us"
			}));
			$('#TotalAmount').text(totalAmount == 0 ? '0' : $.formatNumber(totalAmount, {
				format: formatNum,
				locale: "us"
			}));

			return {
				Amount: amount,
				VatAmount: totalVatAmount,
				TotalAmount: totalAmount,
				DiscountAmount: 0
			};
		}

		function loadTariffSTD(inv_temp) {

			var formdata = {
				'action': 'view',
				'act': 'load_tariff',
				'invTemp': inv_temp
			};

			_useTplts = _useTplts.concat(inv_temp);

			tblInv.dataTable().fnClearTable();
			extendSelectOnGrid();
			return;

			$(".row.ibox-footer").blockUI();
			$('#inv-temp').parent().blockUI();

			$.ajax({
				url: "/Tools/tlManualInvoice/get-tariff",
				dataType: 'json',
				data: formdata,
				type: 'POST',
				success: function(data) {
					$(".row.ibox-footer").unblock();
					$('#inv-temp').parent().unblock();
					if (data.deny) {
						toastr["error"](data.deny);
						return;
					}

					if (data.no_payer) {
						$(".toast").remove();
						toastr["error"](data.no_payer);

						tblInv.dataTable().fnClearTable();
						return;
					}

					var rows = [];
					if (data.results && data.results.length > 0) {
						_listTariff = _listTariff.concat(data.results);
						var lst = data.results;
						var stt = tblInv.DataTable().rows().count() + 1;
						for (i = 0; i < lst.length; i++) {
							var status = lst[i].Status == "F" ? "Hàng" : "Rỗng";
							var isLocal = lst[i].IsLocalForeign == "F" ? "Ngoại" : (lst[i].IsLocalForeign == "L" ? "Nội" : "");
							rows.push([
								lst[i].rowguid, (stt++), lst[i].TRFCode, lst[i].TRF_STD_DESC, '' //them remark
								, lst[i].UnitID, lst[i].ClassID, lst[i].ItemID, '*' //iso size
								, '*' //FULL - EMPTY
								, lst[i].IsLocalForeign, 0 //lst[i].Quantity
								, 0 //lst[i].StandardTariff
								, 0 //lst[i].Unit_rate
								, 0 //lst[i].Amount
								, lst[i].VatAmount ? parseFloat(lst[i].VatAmount) : '', 0 //lst[i].VatAmountAmount
								, 0 //lst[i].SubAmount
							]);
						}
					}

					// tblInv.dataTable().fnClearTable();
					if (rows.length > 0) {
						tblInv.dataTable().fnAddData(rows);
					}

					extendSelectOnGrid();
				},
				error: function(err) {
					$(".toast").remove();
					toastr["error"]("ERROR!");
					$(".row.ibox-footer").unblock();
					$('#inv-temp').parent().unblock();
					tblInv.dataTable().fnClearTable();

					console.log(err);
				}
			});
		}

		function loadInvTemp() {
			var currency = $("#inv-temp-currency").val();
			var html = '<option value="" selected="">-- Chọn Mẫu cước --</option>';
			$.each(invTemps.filter(p => p.CurrencyCode == currency), function(i, v) {
				html += '<option data="' + currency + '" value="' + v.TPLT_NM + '">' + v.TPLT_NM + ' : ' + v.TPLT_DESC + '</option>';
			});

			$("#inv-temp").html(html).selectpicker("refresh");
			$('#inv-type').val(currency).selectpicker('refresh').trigger('change');
			$('#Amount, #VatAmount, #TotalAmount').text('0');
		}

		function extendSelectOnGrid() {
			//------SET DROPDOWN BUTTON FOR COLUMN
			tblInv.columnDropdownButton({
				data: [{
						colIndex: _colsPayment.indexOf("ClassID"),
						source: _classCode
					}, {
						colIndex: _colsPayment.indexOf("IsLocalForeign"),
						source: _localForeign
					},
					{
						colIndex: _colsPayment.indexOf("UnitID"),
						source: _units.map(p => ({
							ItemID: p.UnitID,
							ItemName: p.UnitName
						}))
					},
					{
						colIndex: _colsPayment.indexOf("ItemID"),
						source: _itemList.map(p => ({
							ItemID: p.ItemID,
							ItemName: p.ItemName
						}))
					}
				],
				onSelected: function(cell, itemSelected) {
					tblInv.DataTable().cell(cell).data(itemSelected.attr('code')).draw(false);
					tblInv.DataTable().cell(cell.parent().index(), cell.next()).focus();
				}
			});
			//------SET DROPDOWN BUTTON FOR COLUMN

			tblInv.editableTableWidget();
		}

		function publishInv(isViewDraft = false) {
			var btn = isViewDraft ? $('#view-draft-inv') : $('#pay-confirm');
			var datas = getInvDraftDetail();
			if (datas.length == 0) {
				$.alert({
					title: "Thông báo",
					content: "Không thể xử lý (thiếu thông tin chi tiết hoá đơn)!",
					type: 'red'
				});
				return;
			}

			datas.map(p => p["CurrencyCode"] = $("#inv-temp option:checked").attr("data") ? $("#inv-temp option:checked").attr("data") : "VND");

			var selectedShip = _shipData.filter(p => p.VoyageKey == _selectVoyageKey)[0];
			var shipInfo = {
				VesselName: selectedShip.VesselName,
				InboundVoyage: selectedShip.InboundVoyage,
				OutboundVoyage: selectedShip.OutboundVoyage,
				NationID: selectedShip.NationID,
				DWT: selectedShip.DWT,
				ATB: selectedShip.ATB,
				ATD: selectedShip.ATD,
				BerthID: selectedShip.BerthID
			}

			var drTotal = calcTotal();
			var formData = {
				cusTaxCode: $('#taxcode').val(),
				cusAddr: $('#p-payer-addr').text(),
				cusName: $('#p-payername').text(),
				sum_amount: drTotal.Amount,
				vat_amount: drTotal.VatAmount,
				total_amount: drTotal.TotalAmount,
				inv_type: $("#inv-type").val(),
				exchange_rate: $("#ExchangeRate").val(),
				had_exchange: 1,
				isCredit: $("#paymentType").val() == 'CRE' ? '1' : '0',
				paymentMethod: $("#paymentMethod").val(),
				shipInfo: shipInfo,
				note: $('#remark').val(),
				invDate: $('#inv-date').val(),
				datas: datas
			};

			let url = isViewDraft ?
				"/Invoice/invoice_management/draft" :
				"/Invoice/invoice_management/publish"

			$.ajax({
				url: url,
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function(data) {
					if (!data.success) {
						btn.button("reset");
						$(".toast").remove();
						toastr["error"](data.error);
						return;
					}

					if (isViewDraft) {
						$(".ibox").first().unblock();
						if (!data.success) {
							toastr["error"](data.message);
							return;
						}

						if (data.pdfData) {
							// data should be your response data in base64 format
							const blob = dataURItoBlob(data.pdfData);
							const url = URL.createObjectURL(blob);
							// to open the PDF in a new window
							window.open(url, '_blank');
							return;
						}

						if (data.html) {
							$('#view-inv-draft-content').html(data.html);
							$('#view-inv-draft-modal').modal('show');
							return;
						}
					}

					saveData(data);
				},
				error: function(err) {
					btn.button("reset");
					console.log(err);
				}
			});
		}

		function saveData(invInfo) {
			var drDetail = getInvDraftDetail();

			if (drDetail.length == 0) {
				$.alert({
					title: "Thông báo",
					content: "Không thể xử lý (thiếu thông tin chi tiết hoá đơn)!",
					type: 'red'
				});
				return;
			}

			var drTotal = calcTotal();

			if (_selectVoyageKey) {
				var selectedShip = _shipData.filter(p => p.VoyageKey == _selectVoyageKey)[0];
				drTotal['VoyageKey'] = _selectVoyageKey;
				drTotal['VesselID'] = selectedShip.VesselID;
				drTotal['VesselInfo'] = {
					VesselName: selectedShip.VesselName,
					InboundVoyage: selectedShip.InboundVoyage,
					OutboundVoyage: selectedShip.OutboundVoyage,
				}
			}

			drTotal["CusTypeID"] = getPayerType($("#cusID").val());
			drTotal["CusID"] = $("#cusID").val();
			drTotal["CusName"] = $("#p-payername").text();
			drTotal["TaxCode"] = $('#taxcode').val();
			drTotal["Address"] = $('#p-payer-addr').text();

			drTotal["PaymentTypeID"] = $('#paymentType').val();
			drTotal["PaymentMethod"] = $('#paymentMethod').val();
			drTotal["TariffTempID"] = JSON.stringify(_useTplts);
			drTotal["CurrencyCode"] = $('#inv-type').val();
			drTotal["ExchangeRate"] = $("#ExchangeRate").val() ? $("#ExchangeRate").val() : 1;
			drTotal["OrderNo"] = $("#ref_no").val();
			var formData = {
				'action': 'save',
				'mailTo': $("#mail").val(),
				'args': {
					'pubType': $('a.publish-opt.active').attr('data-value'),
					'draft_detail': drDetail,
					'draft_total': drTotal
				}
			};

			if (typeof invInfo !== "undefined" && invInfo !== null) {
				formData.args["invInfo"] = invInfo;
				formData.args.draft_total['InvoiceDate'] = invInfo.invoiceDate //phat hanh hoa don co truyen ngay phat hanh (Viettel) -> luu xuong db
			}

			$.ajax({
				url: "/Tools/tlManualInvoice/save",
				dataType: 'json',
				data: formData,
				type: 'POST',
				success: function(data) {
					if (data.deny) {
						$('.ibox.collapsible-box').unblock();
						$('#pay-confirm').button("reset");
						toastr["error"](data.deny);
						return;
					}

					if (!data.success) {
						$('.ibox.collapsible-box').unblock();
						$('#pay-confirm').button("reset");
						toastr["error"](data.message || 'Thất bại!');
						return;
					}

					if (data.non_invInfo) {
						$('.ibox.collapsible-box').unblock();
						$('#pay-confirm').button("reset");
						toastr["error"](data.non_invInfo);
						return;
					}

					if (data.invInfo || data.dftInfo) {
						var form = document.createElement("form");
						form.setAttribute("method", "post");
						form.setAttribute("action", "/Tools/success");

						if (data.invInfo) {
							var input = document.createElement('input');
							input.type = 'hidden';
							input.name = "invInfo";
							input.value = JSON.stringify(data.invInfo || '');
							form.appendChild(input);
						}

						if (data.dftInfo) {
							var input = document.createElement('input');
							input.type = 'hidden';
							input.name = "dftInfo";
							input.value = JSON.stringify(data.dftInfo || '');
							form.appendChild(input);
						}

						document.body.appendChild(form);
						form.submit();
						document.body.removeChild(form);
						return;
					}

					toastr["success"]("Lưu dữ liệu thành công!");
					location.reload(true);
				},
				error: function(xhr, status, error) {
					$('.ibox.collapsible-box').unblock();
					console.log(xhr);
					$('.toast').remove();
					$('#pay-confirm').button("reset");
					toastr['error']("Server Error at [saveData]");
				}
			});
		}

		function getInvDraftDetail() {
			var rows = tblInv.getChangedData([], '');

			if (rows.length == 0) {
				return [];
			}

			var draftdetail = [];
			var exchange_rate = parseFloat($('#ExchangeRate').val().replace(',', ''));
			//ko quy doi khi 2 loai hoa don giong nhau
			if ($('#inv-temp-currency').val() == $('#inv-type').val()) {
				exchange_rate = 1;
			}

			var roundNum = _roundNums[$('#inv-type').val()];
			rows.map(p => delete p.STT);

			$.each(rows, function(index, item) {
				if (_itemList.filter(p => p.ItemID == item.ItemID).length == 0 && item.ItemID && item.ItemID != '*') {
					item.ItemID = _itemList.filter(p => p.ItemName.toUpperCase() == item.ItemID.toUpperCase())
						.map(x => x.ItemID)[0];
				}

				item.CargoTypeID = _itemList.filter(p => p.ItemID === item.ItemID)[0]?.CargoTypeID || '*';

				if (exchange_rate > 1) {
					item.PriceIncludeVat = parseFloat((item.PriceIncludeVat * exchange_rate).toFixed(roundNum));
					item.UnitPrice = parseFloat((item.UnitPrice * exchange_rate).toFixed(roundNum));
					item.Amount = parseFloat((item.Amount * exchange_rate).toFixed(roundNum));
					item.VatAmount = parseFloat((item.VatAmount * exchange_rate).toFixed(roundNum));
					item.TotalAmount = parseFloat((item.VatAmount * exchange_rate).toFixed(roundNum));
				}
			});
			return rows;
		}

		function search_ship() {
			$("#search-ship").waitingLoad();
			var formdata = {
				'action': 'view',
				'arrStatus': $('input[name="shipArrStatus"]:checked').val(),
				'shipname': $('#search-ship-name').val()
			};
			_shipData.length = 0;

			$.ajax({
				url: "/Tools/tlManualInvoice/get-ship",
				dataType: 'json',
				data: formdata,
				type: 'POST',
				success: function(data) {
					var rows = [];
					if (data.vsls.length > 0) {
						_shipData = data.vsls;
						for (i = 0; i < data.vsls.length; i++) {
							rows.push([
								data.vsls[i].VesselID,
								(i + 1),
								data.vsls[i].VesselName,
								data.vsls[i].InboundVoyage,
								data.vsls[i].OutboundVoyage,
								getDateTime(data.vsls[i].ETB),
								data.vsls[i].VoyageKey,
								getDateTime(data.vsls[i].ATB),
								data.vsls[i].InLane || ''
							]);
						}
					}
					$('#search-ship').dataTable().fnClearTable();
					if (rows.length > 0) {
						$('#search-ship').dataTable().fnAddData(rows);
					}
				},
				error: function(err) {
					console.log(err);
				}
			});
		}

		function load_payer() {
			var tblPayer = $('#search-payer');
			tblPayer.waitingLoad();

			$.ajax({
				url: "/Tools/tlManualInvoice/get-payer",
				dataType: 'json',
				data: {
					'action': 'view',
					'act': 'load_payer'
				},
				type: 'POST',
				success: function(data) {
					var rows = [];

					if (data.payers && data.payers.length > 0) {
						payers = data.payers;

						var i = 0;
						$.each(payers, function(index, rData) {
							var r = [];
							$.each(_colPayer, function(idx, colname) {
								var val = "";
								switch (colname) {
									case "STT":
										val = i + 1;
										break;
									case "PaymentTypeID":
										val = rData.PaymentTypeName || rData[colname] || '';
										break;
									default:
										val = rData[colname] ? rData[colname] : "";
										break;
								}
								r.push(val);
							});
							i++;
							rows.push(r);
						});
					}

					tblPayer.dataTable().fnClearTable();
					if (rows.length > 0) {
						tblPayer.dataTable().fnAddData(rows);
					}

					$("#taxcode").prop("readonly", false);
					$("#taxcode").prop("placeholder", "ĐT thanh toán");
				},
				error: function(err) {
					tblPayer.dataTable().fnClearTable();
					console.log(err);
					toastr["error"]("Server Error at [load_payer]!");
				}
			});
		};

		function fillPayer() {
			var py = $("#cusID").val() ? payers.filter(p => p.TaxCode == $('#taxcode').val() && p.CusID == $("#cusID").val()) :
				payers.filter(p => p.TaxCode == $('#taxcode').val());

			if (py.length > 0) { //fa-check-square
				$('#payer-name, #p-payername').text(py[0].CusName);
				$('#payer-addr, #p-payer-addr').text(py[0].Address);

				if (py[0].Email) {
					$("#mail").val(py[0].Email);
				}
				if (py[0].Email && py[0].Email != py[0].Email) {
					$("#mail").val($("#mail").val() + ',' + py[0].Email);
				}

				$("#taxcode").removeClass("error");
			}

			return py.length > 0;
		}

		function getPayerType(id) {
			if (payers.length == 0) return "";
			var py = payers.filter(p => p.CusID == id).map(p => p.CusTypeID)[0] || "";
			return py;
		}

		function printDraft(draftNo) {
			var form = document.createElement("form");
			form.setAttribute("method", "post");
			form.setAttribute("target", "_blank");
			form.setAttribute("action", "/rpt_export/view_draft_pdf");

			var input = document.createElement('input');
			input.type = 'hidden';
			input.name = "draftNo";
			input.value = draftNo;
			form.appendChild(input);

			var input2 = document.createElement('input');
			input2.type = 'hidden';
			input2.name = "payerName";
			input2.value = $("#payer-name").val();
			form.appendChild(input2);

			document.body.appendChild(form);
			form.submit();
			document.body.removeChild(form);
		};

		//function read excel file
		function filePicked(oEvent) {
			// Get The File From The Input
			var oFile = oEvent.target.files[0];
			var sFilename = oFile.name;
			// Create A File Reader HTML5
			var reader = new FileReader();

			// Ready The Event For When A File Gets Selected
			reader.onload = function(e) {
				var data = e.target.result;
				var workbook = XLSX.read(data, {
					type: 'binary'
				});
				// Loop Over Each Sheet

				// workbook.SheetNames.forEach(function(sheetName) {

				// });
				// read first sheet
				// Here is your object
				var sheetName = workbook.SheetNames[0];
				var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName], {
					header: 0
				});
				importfileExcel(XL_row_object ? XL_row_object : []);
			};

			reader.onerror = function(ex) {
				toastr['error']("Không thể đọc được tệp này!");
				console.log(ex);
			};

			reader.readAsBinaryString(oFile);
		}

		function importfileExcel(importData) {
			tblInv.waitingLoad();
			var rows = [];
			if (importData.length > 1) {
				var headerText = importData[0];
				var data = importData.filter((a, index) => index !== 0 && a["TRFCode"]); // filter loại bỏ dòng tiêu đề và các row không có mã biểu cước
				var i = 0;
				var notfoundCode = '';

				data.map((rData, index) => {
					var row = [];
					Object.keys(rData).filter(p => p.includes("EMPTY")).map(p => delete rData[p]);
					_colsPayment.map((colname, idx) => {
						var val = "";
						switch (colname) {
							case "STT":
								val = i + 1;
								break;
							case "ClassID":
								val = rData[colname] ? _classCode.filter(p => p.ClassID == rData[colname]).map(x => x.ClassID)[0] : '';
								notfoundCode = !val ? String(rData[colname]) : '';
								break;
							case "ItemID":
								val = rData[colname] ? _itemList.filter(p => p.ItemID == rData[colname]).map(x => x.ItemID)[0] : '';
								notfoundCode = !val ? String(rData[colname]) : '';
								break;
							case "IsLocalForeign":
								val = rData[colname] ? _localForeign.filter(p => p.Code == rData[colname]).map(x => x.Code)[0] : '';
								notfoundCode = !val ? String(rData[colname]) : '';
								break;

							case "Quantity":
							case "PriceIncludeVat":
							case "UnitPrice":
							case "Amount":
							case "VatRate":
							case "VatAmount":
							case "TotalAmount":
								val = parseFloat(rData[colname] || 0);
								break;
							default:
								val = rData[colname] ? rData[colname] : "";
								break;
						}

						if (notfoundCode) {
							let str = '[' + headerText[colname] + ']: [' + notfoundCode + '] Sai định dạng!';
							toastr.error(str)
							return false;
						}
						row.push(val);
					});

					if (notfoundCode) return false;
					i++;
					rows.push(row);
				})
			}

			tblInv.dataTable().fnClearTable();
			if (notfoundCode) return;
			if (rows.length > 0) {
				tblInv.dataTable().fnAddData(rows);
				extendSelectOnGrid();
			}
		}
		//END IMPORT FILES

		function clearPayer() {
			$("#cusID").val('');
			$('#taxcode').val('');
			$('#p-payername, #p-payer-addr').text('');
		}

		function findPayer(str) {
			clearPayer();
			$('#taxcode').parent().blockUI();
			$.ajax({
				url: "/Tools/tlManualInvoice/get-payer",
				dataType: 'json',
				data: {
					action: 'view',
					act: 'search_cus_by_tax',
					taxCode: str
				},
				type: 'POST',
				success: function(data) {
					$('#taxcode').parent().unblock();
					if (data.deny) {
						$('#payment-modal').find('.modal-content').unblock();
						toastr["error"](data.deny);
						return;
					}

					if (data.error) {
						$(".toast").remove();
						toastr["error"](data.error);
						return;
					}

					if (!data['cus']) {
						$(".toast").remove();
						toastr["error"]('Mã số thuế này không tồn tại trong hệ thống! Vui lòng nhập lại hoặc tạo mới');
						return;
					}

					if (payers.length == 0) {
						payers.push(data.cus);
					}

					$('#taxcode').val(data.cus.TaxCode);
					$('#cusID').val(data.cus.CusID);
					$('#taxcode').trigger('change');

				},
				error: function(err) {
					$('#taxcode').parent().unblock();
					$(".toast").remove();
					toastr["error"]('Xảy ra lỗi');
					console.log(err);
				}
			});
		}

		//------FUNCTIONS
	});
</script>

<script src="/assets/vendors/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
<script src="/assets/js/jshashtable-2.1.js"></script>
<script src="/assets/js/jquery.numberformatter-1.2.3.min.js"></script>
<script src="/assets/vendors/dataTables/dataTables.buttons.min.js"></script>
<script src="/assets/vendors/dataTables/extensions/jszip.min.js"></script>
<script src="/assets/vendors/dataTables/extensions/buttons.html5.min.js"></script>
<script src="/assets/js/xlsx.full.min.js"></script>